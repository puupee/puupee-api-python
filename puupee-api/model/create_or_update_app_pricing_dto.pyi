# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from puupee-api import schemas  # noqa: F401


class CreateOrUpdateAppPricingDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            naming = schemas.StrSchema
            monthProductId = schemas.StrSchema
            yearProductId = schemas.StrSchema
            description = schemas.StrSchema
            appId = schemas.UUIDSchema
            monthPrice = schemas.Float64Schema
            monthDiscount = schemas.Float64Schema
            monthDiscountPrice = schemas.Float64Schema
            monthDiscountStartAt = schemas.DateTimeSchema
            monthDiscountEndAt = schemas.DateTimeSchema
            yearPrice = schemas.Float64Schema
            yearDiscount = schemas.Float64Schema
            yearDiscountPrice = schemas.Float64Schema
            yearDiscountStartAt = schemas.DateTimeSchema
            yearDiscountEndAt = schemas.DateTimeSchema
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AppPricingItemDto']:
                        return AppPricingItemDto
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AppPricingItemDto'], typing.List['AppPricingItemDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AppPricingItemDto':
                    return super().__getitem__(i)
            __annotations__ = {
                "naming": naming,
                "monthProductId": monthProductId,
                "yearProductId": yearProductId,
                "description": description,
                "appId": appId,
                "monthPrice": monthPrice,
                "monthDiscount": monthDiscount,
                "monthDiscountPrice": monthDiscountPrice,
                "monthDiscountStartAt": monthDiscountStartAt,
                "monthDiscountEndAt": monthDiscountEndAt,
                "yearPrice": yearPrice,
                "yearDiscount": yearDiscount,
                "yearDiscountPrice": yearDiscountPrice,
                "yearDiscountStartAt": yearDiscountStartAt,
                "yearDiscountEndAt": yearDiscountEndAt,
                "items": items,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["naming"]) -> MetaOapg.properties.naming: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthProductId"]) -> MetaOapg.properties.monthProductId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearProductId"]) -> MetaOapg.properties.yearProductId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appId"]) -> MetaOapg.properties.appId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthPrice"]) -> MetaOapg.properties.monthPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthDiscount"]) -> MetaOapg.properties.monthDiscount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthDiscountPrice"]) -> MetaOapg.properties.monthDiscountPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthDiscountStartAt"]) -> MetaOapg.properties.monthDiscountStartAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthDiscountEndAt"]) -> MetaOapg.properties.monthDiscountEndAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearPrice"]) -> MetaOapg.properties.yearPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearDiscount"]) -> MetaOapg.properties.yearDiscount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearDiscountPrice"]) -> MetaOapg.properties.yearDiscountPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearDiscountStartAt"]) -> MetaOapg.properties.yearDiscountStartAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearDiscountEndAt"]) -> MetaOapg.properties.yearDiscountEndAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["naming", "monthProductId", "yearProductId", "description", "appId", "monthPrice", "monthDiscount", "monthDiscountPrice", "monthDiscountStartAt", "monthDiscountEndAt", "yearPrice", "yearDiscount", "yearDiscountPrice", "yearDiscountStartAt", "yearDiscountEndAt", "items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["naming"]) -> typing.Union[MetaOapg.properties.naming, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthProductId"]) -> typing.Union[MetaOapg.properties.monthProductId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearProductId"]) -> typing.Union[MetaOapg.properties.yearProductId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appId"]) -> typing.Union[MetaOapg.properties.appId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthPrice"]) -> typing.Union[MetaOapg.properties.monthPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthDiscount"]) -> typing.Union[MetaOapg.properties.monthDiscount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthDiscountPrice"]) -> typing.Union[MetaOapg.properties.monthDiscountPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthDiscountStartAt"]) -> typing.Union[MetaOapg.properties.monthDiscountStartAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthDiscountEndAt"]) -> typing.Union[MetaOapg.properties.monthDiscountEndAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearPrice"]) -> typing.Union[MetaOapg.properties.yearPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearDiscount"]) -> typing.Union[MetaOapg.properties.yearDiscount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearDiscountPrice"]) -> typing.Union[MetaOapg.properties.yearDiscountPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearDiscountStartAt"]) -> typing.Union[MetaOapg.properties.yearDiscountStartAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearDiscountEndAt"]) -> typing.Union[MetaOapg.properties.yearDiscountEndAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["naming", "monthProductId", "yearProductId", "description", "appId", "monthPrice", "monthDiscount", "monthDiscountPrice", "monthDiscountStartAt", "monthDiscountEndAt", "yearPrice", "yearDiscount", "yearDiscountPrice", "yearDiscountStartAt", "yearDiscountEndAt", "items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        naming: typing.Union[MetaOapg.properties.naming, str, schemas.Unset] = schemas.unset,
        monthProductId: typing.Union[MetaOapg.properties.monthProductId, str, schemas.Unset] = schemas.unset,
        yearProductId: typing.Union[MetaOapg.properties.yearProductId, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        appId: typing.Union[MetaOapg.properties.appId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        monthPrice: typing.Union[MetaOapg.properties.monthPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monthDiscount: typing.Union[MetaOapg.properties.monthDiscount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monthDiscountPrice: typing.Union[MetaOapg.properties.monthDiscountPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monthDiscountStartAt: typing.Union[MetaOapg.properties.monthDiscountStartAt, str, datetime, schemas.Unset] = schemas.unset,
        monthDiscountEndAt: typing.Union[MetaOapg.properties.monthDiscountEndAt, str, datetime, schemas.Unset] = schemas.unset,
        yearPrice: typing.Union[MetaOapg.properties.yearPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        yearDiscount: typing.Union[MetaOapg.properties.yearDiscount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        yearDiscountPrice: typing.Union[MetaOapg.properties.yearDiscountPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        yearDiscountStartAt: typing.Union[MetaOapg.properties.yearDiscountStartAt, str, datetime, schemas.Unset] = schemas.unset,
        yearDiscountEndAt: typing.Union[MetaOapg.properties.yearDiscountEndAt, str, datetime, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateOrUpdateAppPricingDto':
        return super().__new__(
            cls,
            *args,
            naming=naming,
            monthProductId=monthProductId,
            yearProductId=yearProductId,
            description=description,
            appId=appId,
            monthPrice=monthPrice,
            monthDiscount=monthDiscount,
            monthDiscountPrice=monthDiscountPrice,
            monthDiscountStartAt=monthDiscountStartAt,
            monthDiscountEndAt=monthDiscountEndAt,
            yearPrice=yearPrice,
            yearDiscount=yearDiscount,
            yearDiscountPrice=yearDiscountPrice,
            yearDiscountStartAt=yearDiscountStartAt,
            yearDiscountEndAt=yearDiscountEndAt,
            items=items,
            _configuration=_configuration,
            **kwargs,
        )

from puupee-api.model.app_pricing_item_dto import AppPricingItemDto
