# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from puupee-api import schemas  # noqa: F401


class ExtensionPropertyUiLookupDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            url = schemas.StrSchema
            resultListPropertyName = schemas.StrSchema
            displayPropertyName = schemas.StrSchema
            valuePropertyName = schemas.StrSchema
            filterParamName = schemas.StrSchema
            __annotations__ = {
                "url": url,
                "resultListPropertyName": resultListPropertyName,
                "displayPropertyName": displayPropertyName,
                "valuePropertyName": valuePropertyName,
                "filterParamName": filterParamName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resultListPropertyName"]) -> MetaOapg.properties.resultListPropertyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayPropertyName"]) -> MetaOapg.properties.displayPropertyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valuePropertyName"]) -> MetaOapg.properties.valuePropertyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterParamName"]) -> MetaOapg.properties.filterParamName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "resultListPropertyName", "displayPropertyName", "valuePropertyName", "filterParamName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resultListPropertyName"]) -> typing.Union[MetaOapg.properties.resultListPropertyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayPropertyName"]) -> typing.Union[MetaOapg.properties.displayPropertyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valuePropertyName"]) -> typing.Union[MetaOapg.properties.valuePropertyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterParamName"]) -> typing.Union[MetaOapg.properties.filterParamName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "resultListPropertyName", "displayPropertyName", "valuePropertyName", "filterParamName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        resultListPropertyName: typing.Union[MetaOapg.properties.resultListPropertyName, str, schemas.Unset] = schemas.unset,
        displayPropertyName: typing.Union[MetaOapg.properties.displayPropertyName, str, schemas.Unset] = schemas.unset,
        valuePropertyName: typing.Union[MetaOapg.properties.valuePropertyName, str, schemas.Unset] = schemas.unset,
        filterParamName: typing.Union[MetaOapg.properties.filterParamName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExtensionPropertyUiLookupDto':
        return super().__new__(
            cls,
            *args,
            url=url,
            resultListPropertyName=resultListPropertyName,
            displayPropertyName=displayPropertyName,
            valuePropertyName=valuePropertyName,
            filterParamName=filterParamName,
            _configuration=_configuration,
            **kwargs,
        )
