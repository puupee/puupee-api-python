# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from puupee-api import schemas  # noqa: F401


class LanguageInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            cultureName = schemas.StrSchema
            uiCultureName = schemas.StrSchema
            displayName = schemas.StrSchema
            twoLetterISOLanguageName = schemas.StrSchema
            flagIcon = schemas.StrSchema
            __annotations__ = {
                "cultureName": cultureName,
                "uiCultureName": uiCultureName,
                "displayName": displayName,
                "twoLetterISOLanguageName": twoLetterISOLanguageName,
                "flagIcon": flagIcon,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cultureName"]) -> MetaOapg.properties.cultureName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uiCultureName"]) -> MetaOapg.properties.uiCultureName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twoLetterISOLanguageName"]) -> MetaOapg.properties.twoLetterISOLanguageName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flagIcon"]) -> MetaOapg.properties.flagIcon: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cultureName", "uiCultureName", "displayName", "twoLetterISOLanguageName", "flagIcon", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cultureName"]) -> typing.Union[MetaOapg.properties.cultureName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uiCultureName"]) -> typing.Union[MetaOapg.properties.uiCultureName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twoLetterISOLanguageName"]) -> typing.Union[MetaOapg.properties.twoLetterISOLanguageName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flagIcon"]) -> typing.Union[MetaOapg.properties.flagIcon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cultureName", "uiCultureName", "displayName", "twoLetterISOLanguageName", "flagIcon", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cultureName: typing.Union[MetaOapg.properties.cultureName, str, schemas.Unset] = schemas.unset,
        uiCultureName: typing.Union[MetaOapg.properties.uiCultureName, str, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        twoLetterISOLanguageName: typing.Union[MetaOapg.properties.twoLetterISOLanguageName, str, schemas.Unset] = schemas.unset,
        flagIcon: typing.Union[MetaOapg.properties.flagIcon, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LanguageInfo':
        return super().__new__(
            cls,
            *args,
            cultureName=cultureName,
            uiCultureName=uiCultureName,
            displayName=displayName,
            twoLetterISOLanguageName=twoLetterISOLanguageName,
            flagIcon=flagIcon,
            _configuration=_configuration,
            **kwargs,
        )
