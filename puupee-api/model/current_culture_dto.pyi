# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from puupee-api import schemas  # noqa: F401


class CurrentCultureDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            displayName = schemas.StrSchema
            englishName = schemas.StrSchema
            threeLetterIsoLanguageName = schemas.StrSchema
            twoLetterIsoLanguageName = schemas.StrSchema
            isRightToLeft = schemas.BoolSchema
            cultureName = schemas.StrSchema
            name = schemas.StrSchema
            nativeName = schemas.StrSchema
        
            @staticmethod
            def dateTimeFormat() -> typing.Type['DateTimeFormatDto']:
                return DateTimeFormatDto
            __annotations__ = {
                "displayName": displayName,
                "englishName": englishName,
                "threeLetterIsoLanguageName": threeLetterIsoLanguageName,
                "twoLetterIsoLanguageName": twoLetterIsoLanguageName,
                "isRightToLeft": isRightToLeft,
                "cultureName": cultureName,
                "name": name,
                "nativeName": nativeName,
                "dateTimeFormat": dateTimeFormat,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["englishName"]) -> MetaOapg.properties.englishName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["threeLetterIsoLanguageName"]) -> MetaOapg.properties.threeLetterIsoLanguageName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twoLetterIsoLanguageName"]) -> MetaOapg.properties.twoLetterIsoLanguageName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRightToLeft"]) -> MetaOapg.properties.isRightToLeft: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cultureName"]) -> MetaOapg.properties.cultureName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nativeName"]) -> MetaOapg.properties.nativeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeFormat"]) -> 'DateTimeFormatDto': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["displayName", "englishName", "threeLetterIsoLanguageName", "twoLetterIsoLanguageName", "isRightToLeft", "cultureName", "name", "nativeName", "dateTimeFormat", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["englishName"]) -> typing.Union[MetaOapg.properties.englishName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["threeLetterIsoLanguageName"]) -> typing.Union[MetaOapg.properties.threeLetterIsoLanguageName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twoLetterIsoLanguageName"]) -> typing.Union[MetaOapg.properties.twoLetterIsoLanguageName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRightToLeft"]) -> typing.Union[MetaOapg.properties.isRightToLeft, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cultureName"]) -> typing.Union[MetaOapg.properties.cultureName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nativeName"]) -> typing.Union[MetaOapg.properties.nativeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeFormat"]) -> typing.Union['DateTimeFormatDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["displayName", "englishName", "threeLetterIsoLanguageName", "twoLetterIsoLanguageName", "isRightToLeft", "cultureName", "name", "nativeName", "dateTimeFormat", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        englishName: typing.Union[MetaOapg.properties.englishName, str, schemas.Unset] = schemas.unset,
        threeLetterIsoLanguageName: typing.Union[MetaOapg.properties.threeLetterIsoLanguageName, str, schemas.Unset] = schemas.unset,
        twoLetterIsoLanguageName: typing.Union[MetaOapg.properties.twoLetterIsoLanguageName, str, schemas.Unset] = schemas.unset,
        isRightToLeft: typing.Union[MetaOapg.properties.isRightToLeft, bool, schemas.Unset] = schemas.unset,
        cultureName: typing.Union[MetaOapg.properties.cultureName, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        nativeName: typing.Union[MetaOapg.properties.nativeName, str, schemas.Unset] = schemas.unset,
        dateTimeFormat: typing.Union['DateTimeFormatDto', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CurrentCultureDto':
        return super().__new__(
            cls,
            *args,
            displayName=displayName,
            englishName=englishName,
            threeLetterIsoLanguageName=threeLetterIsoLanguageName,
            twoLetterIsoLanguageName=twoLetterIsoLanguageName,
            isRightToLeft=isRightToLeft,
            cultureName=cultureName,
            name=name,
            nativeName=nativeName,
            dateTimeFormat=dateTimeFormat,
            _configuration=_configuration,
            **kwargs,
        )

from puupee-api.model.date_time_format_dto import DateTimeFormatDto
