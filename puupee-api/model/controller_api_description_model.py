# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from puupee-api import schemas  # noqa: F401


class ControllerApiDescriptionModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            controllerName = schemas.StrSchema
            controllerGroupName = schemas.StrSchema
            isRemoteService = schemas.BoolSchema
            isIntegrationService = schemas.BoolSchema
            apiVersion = schemas.StrSchema
            type = schemas.StrSchema
            
            
            class interfaces(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ControllerInterfaceApiDescriptionModel']:
                        return ControllerInterfaceApiDescriptionModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ControllerInterfaceApiDescriptionModel'], typing.List['ControllerInterfaceApiDescriptionModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'interfaces':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ControllerInterfaceApiDescriptionModel':
                    return super().__getitem__(i)
            
            
            class actions(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['ActionApiDescriptionModel']:
                        return ActionApiDescriptionModel
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'ActionApiDescriptionModel':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'ActionApiDescriptionModel':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'ActionApiDescriptionModel',
                ) -> 'actions':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "controllerName": controllerName,
                "controllerGroupName": controllerGroupName,
                "isRemoteService": isRemoteService,
                "isIntegrationService": isIntegrationService,
                "apiVersion": apiVersion,
                "type": type,
                "interfaces": interfaces,
                "actions": actions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["controllerName"]) -> MetaOapg.properties.controllerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["controllerGroupName"]) -> MetaOapg.properties.controllerGroupName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRemoteService"]) -> MetaOapg.properties.isRemoteService: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isIntegrationService"]) -> MetaOapg.properties.isIntegrationService: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiVersion"]) -> MetaOapg.properties.apiVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interfaces"]) -> MetaOapg.properties.interfaces: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actions"]) -> MetaOapg.properties.actions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["controllerName", "controllerGroupName", "isRemoteService", "isIntegrationService", "apiVersion", "type", "interfaces", "actions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["controllerName"]) -> typing.Union[MetaOapg.properties.controllerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["controllerGroupName"]) -> typing.Union[MetaOapg.properties.controllerGroupName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRemoteService"]) -> typing.Union[MetaOapg.properties.isRemoteService, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isIntegrationService"]) -> typing.Union[MetaOapg.properties.isIntegrationService, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiVersion"]) -> typing.Union[MetaOapg.properties.apiVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interfaces"]) -> typing.Union[MetaOapg.properties.interfaces, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actions"]) -> typing.Union[MetaOapg.properties.actions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["controllerName", "controllerGroupName", "isRemoteService", "isIntegrationService", "apiVersion", "type", "interfaces", "actions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        controllerName: typing.Union[MetaOapg.properties.controllerName, str, schemas.Unset] = schemas.unset,
        controllerGroupName: typing.Union[MetaOapg.properties.controllerGroupName, str, schemas.Unset] = schemas.unset,
        isRemoteService: typing.Union[MetaOapg.properties.isRemoteService, bool, schemas.Unset] = schemas.unset,
        isIntegrationService: typing.Union[MetaOapg.properties.isIntegrationService, bool, schemas.Unset] = schemas.unset,
        apiVersion: typing.Union[MetaOapg.properties.apiVersion, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        interfaces: typing.Union[MetaOapg.properties.interfaces, list, tuple, schemas.Unset] = schemas.unset,
        actions: typing.Union[MetaOapg.properties.actions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ControllerApiDescriptionModel':
        return super().__new__(
            cls,
            *args,
            controllerName=controllerName,
            controllerGroupName=controllerGroupName,
            isRemoteService=isRemoteService,
            isIntegrationService=isIntegrationService,
            apiVersion=apiVersion,
            type=type,
            interfaces=interfaces,
            actions=actions,
            _configuration=_configuration,
            **kwargs,
        )

from puupee-api.model.action_api_description_model import ActionApiDescriptionModel
from puupee-api.model.controller_interface_api_description_model import ControllerInterfaceApiDescriptionModel
