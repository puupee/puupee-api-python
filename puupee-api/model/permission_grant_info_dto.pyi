# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from puupee-api import schemas  # noqa: F401


class PermissionGrantInfoDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            displayName = schemas.StrSchema
            parentName = schemas.StrSchema
            isGranted = schemas.BoolSchema
            
            
            class allowedProviders(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedProviders':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class grantedProviders(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProviderInfoDto']:
                        return ProviderInfoDto
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProviderInfoDto'], typing.List['ProviderInfoDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'grantedProviders':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProviderInfoDto':
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "displayName": displayName,
                "parentName": parentName,
                "isGranted": isGranted,
                "allowedProviders": allowedProviders,
                "grantedProviders": grantedProviders,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentName"]) -> MetaOapg.properties.parentName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isGranted"]) -> MetaOapg.properties.isGranted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedProviders"]) -> MetaOapg.properties.allowedProviders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grantedProviders"]) -> MetaOapg.properties.grantedProviders: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "displayName", "parentName", "isGranted", "allowedProviders", "grantedProviders", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentName"]) -> typing.Union[MetaOapg.properties.parentName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isGranted"]) -> typing.Union[MetaOapg.properties.isGranted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedProviders"]) -> typing.Union[MetaOapg.properties.allowedProviders, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grantedProviders"]) -> typing.Union[MetaOapg.properties.grantedProviders, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "displayName", "parentName", "isGranted", "allowedProviders", "grantedProviders", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        parentName: typing.Union[MetaOapg.properties.parentName, str, schemas.Unset] = schemas.unset,
        isGranted: typing.Union[MetaOapg.properties.isGranted, bool, schemas.Unset] = schemas.unset,
        allowedProviders: typing.Union[MetaOapg.properties.allowedProviders, list, tuple, schemas.Unset] = schemas.unset,
        grantedProviders: typing.Union[MetaOapg.properties.grantedProviders, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PermissionGrantInfoDto':
        return super().__new__(
            cls,
            *args,
            name=name,
            displayName=displayName,
            parentName=parentName,
            isGranted=isGranted,
            allowedProviders=allowedProviders,
            grantedProviders=grantedProviders,
            _configuration=_configuration,
            **kwargs,
        )

from puupee-api.model.provider_info_dto import ProviderInfoDto
