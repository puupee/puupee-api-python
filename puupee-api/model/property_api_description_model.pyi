# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from puupee-api import schemas  # noqa: F401


class PropertyApiDescriptionModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            jsonName = schemas.StrSchema
            type = schemas.StrSchema
            typeSimple = schemas.StrSchema
            isRequired = schemas.BoolSchema
            minLength = schemas.Int32Schema
            maxLength = schemas.Int32Schema
            minimum = schemas.StrSchema
            maximum = schemas.StrSchema
            regex = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "jsonName": jsonName,
                "type": type,
                "typeSimple": typeSimple,
                "isRequired": isRequired,
                "minLength": minLength,
                "maxLength": maxLength,
                "minimum": minimum,
                "maximum": maximum,
                "regex": regex,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jsonName"]) -> MetaOapg.properties.jsonName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeSimple"]) -> MetaOapg.properties.typeSimple: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRequired"]) -> MetaOapg.properties.isRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minLength"]) -> MetaOapg.properties.minLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxLength"]) -> MetaOapg.properties.maxLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum"]) -> MetaOapg.properties.minimum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum"]) -> MetaOapg.properties.maximum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regex"]) -> MetaOapg.properties.regex: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "jsonName", "type", "typeSimple", "isRequired", "minLength", "maxLength", "minimum", "maximum", "regex", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jsonName"]) -> typing.Union[MetaOapg.properties.jsonName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeSimple"]) -> typing.Union[MetaOapg.properties.typeSimple, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRequired"]) -> typing.Union[MetaOapg.properties.isRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minLength"]) -> typing.Union[MetaOapg.properties.minLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxLength"]) -> typing.Union[MetaOapg.properties.maxLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum"]) -> typing.Union[MetaOapg.properties.minimum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum"]) -> typing.Union[MetaOapg.properties.maximum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regex"]) -> typing.Union[MetaOapg.properties.regex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "jsonName", "type", "typeSimple", "isRequired", "minLength", "maxLength", "minimum", "maximum", "regex", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        jsonName: typing.Union[MetaOapg.properties.jsonName, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        typeSimple: typing.Union[MetaOapg.properties.typeSimple, str, schemas.Unset] = schemas.unset,
        isRequired: typing.Union[MetaOapg.properties.isRequired, bool, schemas.Unset] = schemas.unset,
        minLength: typing.Union[MetaOapg.properties.minLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxLength: typing.Union[MetaOapg.properties.maxLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minimum: typing.Union[MetaOapg.properties.minimum, str, schemas.Unset] = schemas.unset,
        maximum: typing.Union[MetaOapg.properties.maximum, str, schemas.Unset] = schemas.unset,
        regex: typing.Union[MetaOapg.properties.regex, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PropertyApiDescriptionModel':
        return super().__new__(
            cls,
            *args,
            name=name,
            jsonName=jsonName,
            type=type,
            typeSimple=typeSimple,
            isRequired=isRequired,
            minLength=minLength,
            maxLength=maxLength,
            minimum=minimum,
            maximum=maximum,
            regex=regex,
            _configuration=_configuration,
            **kwargs,
        )
