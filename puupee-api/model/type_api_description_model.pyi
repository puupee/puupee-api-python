# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from puupee-api import schemas  # noqa: F401


class TypeApiDescriptionModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            baseType = schemas.StrSchema
            isEnum = schemas.BoolSchema
            
            
            class enumNames(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'enumNames':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class enumValues(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'enumValues':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class genericArguments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'genericArguments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class properties(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PropertyApiDescriptionModel']:
                        return PropertyApiDescriptionModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PropertyApiDescriptionModel'], typing.List['PropertyApiDescriptionModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'properties':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PropertyApiDescriptionModel':
                    return super().__getitem__(i)
            __annotations__ = {
                "baseType": baseType,
                "isEnum": isEnum,
                "enumNames": enumNames,
                "enumValues": enumValues,
                "genericArguments": genericArguments,
                "properties": properties,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseType"]) -> MetaOapg.properties.baseType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isEnum"]) -> MetaOapg.properties.isEnum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enumNames"]) -> MetaOapg.properties.enumNames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enumValues"]) -> MetaOapg.properties.enumValues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["genericArguments"]) -> MetaOapg.properties.genericArguments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> MetaOapg.properties.properties: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["baseType", "isEnum", "enumNames", "enumValues", "genericArguments", "properties", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseType"]) -> typing.Union[MetaOapg.properties.baseType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isEnum"]) -> typing.Union[MetaOapg.properties.isEnum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enumNames"]) -> typing.Union[MetaOapg.properties.enumNames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enumValues"]) -> typing.Union[MetaOapg.properties.enumValues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["genericArguments"]) -> typing.Union[MetaOapg.properties.genericArguments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union[MetaOapg.properties.properties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["baseType", "isEnum", "enumNames", "enumValues", "genericArguments", "properties", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        baseType: typing.Union[MetaOapg.properties.baseType, str, schemas.Unset] = schemas.unset,
        isEnum: typing.Union[MetaOapg.properties.isEnum, bool, schemas.Unset] = schemas.unset,
        enumNames: typing.Union[MetaOapg.properties.enumNames, list, tuple, schemas.Unset] = schemas.unset,
        enumValues: typing.Union[MetaOapg.properties.enumValues, list, tuple, schemas.Unset] = schemas.unset,
        genericArguments: typing.Union[MetaOapg.properties.genericArguments, list, tuple, schemas.Unset] = schemas.unset,
        properties: typing.Union[MetaOapg.properties.properties, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TypeApiDescriptionModel':
        return super().__new__(
            cls,
            *args,
            baseType=baseType,
            isEnum=isEnum,
            enumNames=enumNames,
            enumValues=enumValues,
            genericArguments=genericArguments,
            properties=properties,
            _configuration=_configuration,
            **kwargs,
        )

from puupee-api.model.property_api_description_model import PropertyApiDescriptionModel
