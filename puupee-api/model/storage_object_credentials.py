# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from puupee-api import schemas  # noqa: F401


class StorageObjectCredentials(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            storageClass = schemas.StrSchema
            endPoint = schemas.StrSchema
            protocal = schemas.StrSchema
            bucketName = schemas.StrSchema
            regionId = schemas.StrSchema
            securityToken = schemas.StrSchema
            accessKeyId = schemas.StrSchema
            accessKeySecret = schemas.StrSchema
            expiration = schemas.StrSchema
            expiredTime = schemas.Int64Schema
            appId = schemas.StrSchema
            __annotations__ = {
                "storageClass": storageClass,
                "endPoint": endPoint,
                "protocal": protocal,
                "bucketName": bucketName,
                "regionId": regionId,
                "securityToken": securityToken,
                "accessKeyId": accessKeyId,
                "accessKeySecret": accessKeySecret,
                "expiration": expiration,
                "expiredTime": expiredTime,
                "appId": appId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storageClass"]) -> MetaOapg.properties.storageClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endPoint"]) -> MetaOapg.properties.endPoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocal"]) -> MetaOapg.properties.protocal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bucketName"]) -> MetaOapg.properties.bucketName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regionId"]) -> MetaOapg.properties.regionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityToken"]) -> MetaOapg.properties.securityToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessKeyId"]) -> MetaOapg.properties.accessKeyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessKeySecret"]) -> MetaOapg.properties.accessKeySecret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration"]) -> MetaOapg.properties.expiration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiredTime"]) -> MetaOapg.properties.expiredTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appId"]) -> MetaOapg.properties.appId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["storageClass", "endPoint", "protocal", "bucketName", "regionId", "securityToken", "accessKeyId", "accessKeySecret", "expiration", "expiredTime", "appId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storageClass"]) -> typing.Union[MetaOapg.properties.storageClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endPoint"]) -> typing.Union[MetaOapg.properties.endPoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocal"]) -> typing.Union[MetaOapg.properties.protocal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bucketName"]) -> typing.Union[MetaOapg.properties.bucketName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regionId"]) -> typing.Union[MetaOapg.properties.regionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityToken"]) -> typing.Union[MetaOapg.properties.securityToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessKeyId"]) -> typing.Union[MetaOapg.properties.accessKeyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessKeySecret"]) -> typing.Union[MetaOapg.properties.accessKeySecret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration"]) -> typing.Union[MetaOapg.properties.expiration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiredTime"]) -> typing.Union[MetaOapg.properties.expiredTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appId"]) -> typing.Union[MetaOapg.properties.appId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["storageClass", "endPoint", "protocal", "bucketName", "regionId", "securityToken", "accessKeyId", "accessKeySecret", "expiration", "expiredTime", "appId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        storageClass: typing.Union[MetaOapg.properties.storageClass, str, schemas.Unset] = schemas.unset,
        endPoint: typing.Union[MetaOapg.properties.endPoint, str, schemas.Unset] = schemas.unset,
        protocal: typing.Union[MetaOapg.properties.protocal, str, schemas.Unset] = schemas.unset,
        bucketName: typing.Union[MetaOapg.properties.bucketName, str, schemas.Unset] = schemas.unset,
        regionId: typing.Union[MetaOapg.properties.regionId, str, schemas.Unset] = schemas.unset,
        securityToken: typing.Union[MetaOapg.properties.securityToken, str, schemas.Unset] = schemas.unset,
        accessKeyId: typing.Union[MetaOapg.properties.accessKeyId, str, schemas.Unset] = schemas.unset,
        accessKeySecret: typing.Union[MetaOapg.properties.accessKeySecret, str, schemas.Unset] = schemas.unset,
        expiration: typing.Union[MetaOapg.properties.expiration, str, schemas.Unset] = schemas.unset,
        expiredTime: typing.Union[MetaOapg.properties.expiredTime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        appId: typing.Union[MetaOapg.properties.appId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StorageObjectCredentials':
        return super().__new__(
            cls,
            *args,
            storageClass=storageClass,
            endPoint=endPoint,
            protocal=protocal,
            bucketName=bucketName,
            regionId=regionId,
            securityToken=securityToken,
            accessKeyId=accessKeyId,
            accessKeySecret=accessKeySecret,
            expiration=expiration,
            expiredTime=expiredTime,
            appId=appId,
            _configuration=_configuration,
            **kwargs,
        )
