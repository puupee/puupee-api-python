# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from puupee-api import schemas  # noqa: F401


class EmailSettingsDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            smtpHost = schemas.StrSchema
            smtpPort = schemas.Int32Schema
            smtpUserName = schemas.StrSchema
            smtpPassword = schemas.StrSchema
            smtpDomain = schemas.StrSchema
            smtpEnableSsl = schemas.BoolSchema
            smtpUseDefaultCredentials = schemas.BoolSchema
            defaultFromAddress = schemas.StrSchema
            defaultFromDisplayName = schemas.StrSchema
            __annotations__ = {
                "smtpHost": smtpHost,
                "smtpPort": smtpPort,
                "smtpUserName": smtpUserName,
                "smtpPassword": smtpPassword,
                "smtpDomain": smtpDomain,
                "smtpEnableSsl": smtpEnableSsl,
                "smtpUseDefaultCredentials": smtpUseDefaultCredentials,
                "defaultFromAddress": defaultFromAddress,
                "defaultFromDisplayName": defaultFromDisplayName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smtpHost"]) -> MetaOapg.properties.smtpHost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smtpPort"]) -> MetaOapg.properties.smtpPort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smtpUserName"]) -> MetaOapg.properties.smtpUserName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smtpPassword"]) -> MetaOapg.properties.smtpPassword: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smtpDomain"]) -> MetaOapg.properties.smtpDomain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smtpEnableSsl"]) -> MetaOapg.properties.smtpEnableSsl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smtpUseDefaultCredentials"]) -> MetaOapg.properties.smtpUseDefaultCredentials: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultFromAddress"]) -> MetaOapg.properties.defaultFromAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultFromDisplayName"]) -> MetaOapg.properties.defaultFromDisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["smtpHost", "smtpPort", "smtpUserName", "smtpPassword", "smtpDomain", "smtpEnableSsl", "smtpUseDefaultCredentials", "defaultFromAddress", "defaultFromDisplayName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smtpHost"]) -> typing.Union[MetaOapg.properties.smtpHost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smtpPort"]) -> typing.Union[MetaOapg.properties.smtpPort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smtpUserName"]) -> typing.Union[MetaOapg.properties.smtpUserName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smtpPassword"]) -> typing.Union[MetaOapg.properties.smtpPassword, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smtpDomain"]) -> typing.Union[MetaOapg.properties.smtpDomain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smtpEnableSsl"]) -> typing.Union[MetaOapg.properties.smtpEnableSsl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smtpUseDefaultCredentials"]) -> typing.Union[MetaOapg.properties.smtpUseDefaultCredentials, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultFromAddress"]) -> typing.Union[MetaOapg.properties.defaultFromAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultFromDisplayName"]) -> typing.Union[MetaOapg.properties.defaultFromDisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["smtpHost", "smtpPort", "smtpUserName", "smtpPassword", "smtpDomain", "smtpEnableSsl", "smtpUseDefaultCredentials", "defaultFromAddress", "defaultFromDisplayName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        smtpHost: typing.Union[MetaOapg.properties.smtpHost, str, schemas.Unset] = schemas.unset,
        smtpPort: typing.Union[MetaOapg.properties.smtpPort, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        smtpUserName: typing.Union[MetaOapg.properties.smtpUserName, str, schemas.Unset] = schemas.unset,
        smtpPassword: typing.Union[MetaOapg.properties.smtpPassword, str, schemas.Unset] = schemas.unset,
        smtpDomain: typing.Union[MetaOapg.properties.smtpDomain, str, schemas.Unset] = schemas.unset,
        smtpEnableSsl: typing.Union[MetaOapg.properties.smtpEnableSsl, bool, schemas.Unset] = schemas.unset,
        smtpUseDefaultCredentials: typing.Union[MetaOapg.properties.smtpUseDefaultCredentials, bool, schemas.Unset] = schemas.unset,
        defaultFromAddress: typing.Union[MetaOapg.properties.defaultFromAddress, str, schemas.Unset] = schemas.unset,
        defaultFromDisplayName: typing.Union[MetaOapg.properties.defaultFromDisplayName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmailSettingsDto':
        return super().__new__(
            cls,
            *args,
            smtpHost=smtpHost,
            smtpPort=smtpPort,
            smtpUserName=smtpUserName,
            smtpPassword=smtpPassword,
            smtpDomain=smtpDomain,
            smtpEnableSsl=smtpEnableSsl,
            smtpUseDefaultCredentials=smtpUseDefaultCredentials,
            defaultFromAddress=defaultFromAddress,
            defaultFromDisplayName=defaultFromDisplayName,
            _configuration=_configuration,
            **kwargs,
        )
