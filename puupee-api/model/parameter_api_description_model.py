# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from puupee-api import schemas  # noqa: F401


class ParameterApiDescriptionModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            nameOnMethod = schemas.StrSchema
            name = schemas.StrSchema
            jsonName = schemas.StrSchema
            type = schemas.StrSchema
            typeSimple = schemas.StrSchema
            isOptional = schemas.BoolSchema
            defaultValue = schemas.DictSchema
            
            
            class constraintTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'constraintTypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            bindingSourceId = schemas.StrSchema
            descriptorName = schemas.StrSchema
            __annotations__ = {
                "nameOnMethod": nameOnMethod,
                "name": name,
                "jsonName": jsonName,
                "type": type,
                "typeSimple": typeSimple,
                "isOptional": isOptional,
                "defaultValue": defaultValue,
                "constraintTypes": constraintTypes,
                "bindingSourceId": bindingSourceId,
                "descriptorName": descriptorName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameOnMethod"]) -> MetaOapg.properties.nameOnMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jsonName"]) -> MetaOapg.properties.jsonName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeSimple"]) -> MetaOapg.properties.typeSimple: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isOptional"]) -> MetaOapg.properties.isOptional: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultValue"]) -> MetaOapg.properties.defaultValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["constraintTypes"]) -> MetaOapg.properties.constraintTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bindingSourceId"]) -> MetaOapg.properties.bindingSourceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["descriptorName"]) -> MetaOapg.properties.descriptorName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["nameOnMethod", "name", "jsonName", "type", "typeSimple", "isOptional", "defaultValue", "constraintTypes", "bindingSourceId", "descriptorName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameOnMethod"]) -> typing.Union[MetaOapg.properties.nameOnMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jsonName"]) -> typing.Union[MetaOapg.properties.jsonName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeSimple"]) -> typing.Union[MetaOapg.properties.typeSimple, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isOptional"]) -> typing.Union[MetaOapg.properties.isOptional, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultValue"]) -> typing.Union[MetaOapg.properties.defaultValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["constraintTypes"]) -> typing.Union[MetaOapg.properties.constraintTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bindingSourceId"]) -> typing.Union[MetaOapg.properties.bindingSourceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["descriptorName"]) -> typing.Union[MetaOapg.properties.descriptorName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nameOnMethod", "name", "jsonName", "type", "typeSimple", "isOptional", "defaultValue", "constraintTypes", "bindingSourceId", "descriptorName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        nameOnMethod: typing.Union[MetaOapg.properties.nameOnMethod, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        jsonName: typing.Union[MetaOapg.properties.jsonName, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        typeSimple: typing.Union[MetaOapg.properties.typeSimple, str, schemas.Unset] = schemas.unset,
        isOptional: typing.Union[MetaOapg.properties.isOptional, bool, schemas.Unset] = schemas.unset,
        defaultValue: typing.Union[MetaOapg.properties.defaultValue, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        constraintTypes: typing.Union[MetaOapg.properties.constraintTypes, list, tuple, schemas.Unset] = schemas.unset,
        bindingSourceId: typing.Union[MetaOapg.properties.bindingSourceId, str, schemas.Unset] = schemas.unset,
        descriptorName: typing.Union[MetaOapg.properties.descriptorName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ParameterApiDescriptionModel':
        return super().__new__(
            cls,
            *args,
            nameOnMethod=nameOnMethod,
            name=name,
            jsonName=jsonName,
            type=type,
            typeSimple=typeSimple,
            isOptional=isOptional,
            defaultValue=defaultValue,
            constraintTypes=constraintTypes,
            bindingSourceId=bindingSourceId,
            descriptorName=descriptorName,
            _configuration=_configuration,
            **kwargs,
        )
