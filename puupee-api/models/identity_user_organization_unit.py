# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class IdentityUserOrganizationUnit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'creation_time': 'datetime',
        'creator_id': 'str',
        'tenant_id': 'str',
        'user_id': 'str',
        'organization_unit_id': 'str'
    }

    attribute_map = {
        'creation_time': 'creationTime',
        'creator_id': 'creatorId',
        'tenant_id': 'tenantId',
        'user_id': 'userId',
        'organization_unit_id': 'organizationUnitId'
    }

    def __init__(self, creation_time=None, creator_id=None, tenant_id=None, user_id=None, organization_unit_id=None, local_vars_configuration=None):  # noqa: E501
        """IdentityUserOrganizationUnit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._creation_time = None
        self._creator_id = None
        self._tenant_id = None
        self._user_id = None
        self._organization_unit_id = None
        self.discriminator = None

        if creation_time is not None:
            self.creation_time = creation_time
        self.creator_id = creator_id
        self.tenant_id = tenant_id
        if user_id is not None:
            self.user_id = user_id
        if organization_unit_id is not None:
            self.organization_unit_id = organization_unit_id

    @property
    def creation_time(self):
        """Gets the creation_time of this IdentityUserOrganizationUnit.  # noqa: E501


        :return: The creation_time of this IdentityUserOrganizationUnit.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this IdentityUserOrganizationUnit.


        :param creation_time: The creation_time of this IdentityUserOrganizationUnit.  # noqa: E501
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def creator_id(self):
        """Gets the creator_id of this IdentityUserOrganizationUnit.  # noqa: E501


        :return: The creator_id of this IdentityUserOrganizationUnit.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this IdentityUserOrganizationUnit.


        :param creator_id: The creator_id of this IdentityUserOrganizationUnit.  # noqa: E501
        :type creator_id: str
        """

        self._creator_id = creator_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this IdentityUserOrganizationUnit.  # noqa: E501


        :return: The tenant_id of this IdentityUserOrganizationUnit.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this IdentityUserOrganizationUnit.


        :param tenant_id: The tenant_id of this IdentityUserOrganizationUnit.  # noqa: E501
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def user_id(self):
        """Gets the user_id of this IdentityUserOrganizationUnit.  # noqa: E501


        :return: The user_id of this IdentityUserOrganizationUnit.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this IdentityUserOrganizationUnit.


        :param user_id: The user_id of this IdentityUserOrganizationUnit.  # noqa: E501
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def organization_unit_id(self):
        """Gets the organization_unit_id of this IdentityUserOrganizationUnit.  # noqa: E501


        :return: The organization_unit_id of this IdentityUserOrganizationUnit.  # noqa: E501
        :rtype: str
        """
        return self._organization_unit_id

    @organization_unit_id.setter
    def organization_unit_id(self, organization_unit_id):
        """Sets the organization_unit_id of this IdentityUserOrganizationUnit.


        :param organization_unit_id: The organization_unit_id of this IdentityUserOrganizationUnit.  # noqa: E501
        :type organization_unit_id: str
        """

        self._organization_unit_id = organization_unit_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityUserOrganizationUnit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdentityUserOrganizationUnit):
            return True

        return self.to_dict() != other.to_dict()
