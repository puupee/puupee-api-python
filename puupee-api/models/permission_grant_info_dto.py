# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class PermissionGrantInfoDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'parent_name': 'str',
        'is_granted': 'bool',
        'allowed_providers': 'list[str]',
        'granted_providers': 'list[ProviderInfoDto]'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'parent_name': 'parentName',
        'is_granted': 'isGranted',
        'allowed_providers': 'allowedProviders',
        'granted_providers': 'grantedProviders'
    }

    def __init__(self, name=None, display_name=None, parent_name=None, is_granted=None, allowed_providers=None, granted_providers=None, local_vars_configuration=None):  # noqa: E501
        """PermissionGrantInfoDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._parent_name = None
        self._is_granted = None
        self._allowed_providers = None
        self._granted_providers = None
        self.discriminator = None

        self.name = name
        self.display_name = display_name
        self.parent_name = parent_name
        if is_granted is not None:
            self.is_granted = is_granted
        self.allowed_providers = allowed_providers
        self.granted_providers = granted_providers

    @property
    def name(self):
        """Gets the name of this PermissionGrantInfoDto.  # noqa: E501


        :return: The name of this PermissionGrantInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PermissionGrantInfoDto.


        :param name: The name of this PermissionGrantInfoDto.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this PermissionGrantInfoDto.  # noqa: E501


        :return: The display_name of this PermissionGrantInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PermissionGrantInfoDto.


        :param display_name: The display_name of this PermissionGrantInfoDto.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def parent_name(self):
        """Gets the parent_name of this PermissionGrantInfoDto.  # noqa: E501


        :return: The parent_name of this PermissionGrantInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this PermissionGrantInfoDto.


        :param parent_name: The parent_name of this PermissionGrantInfoDto.  # noqa: E501
        :type parent_name: str
        """

        self._parent_name = parent_name

    @property
    def is_granted(self):
        """Gets the is_granted of this PermissionGrantInfoDto.  # noqa: E501


        :return: The is_granted of this PermissionGrantInfoDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_granted

    @is_granted.setter
    def is_granted(self, is_granted):
        """Sets the is_granted of this PermissionGrantInfoDto.


        :param is_granted: The is_granted of this PermissionGrantInfoDto.  # noqa: E501
        :type is_granted: bool
        """

        self._is_granted = is_granted

    @property
    def allowed_providers(self):
        """Gets the allowed_providers of this PermissionGrantInfoDto.  # noqa: E501


        :return: The allowed_providers of this PermissionGrantInfoDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_providers

    @allowed_providers.setter
    def allowed_providers(self, allowed_providers):
        """Sets the allowed_providers of this PermissionGrantInfoDto.


        :param allowed_providers: The allowed_providers of this PermissionGrantInfoDto.  # noqa: E501
        :type allowed_providers: list[str]
        """

        self._allowed_providers = allowed_providers

    @property
    def granted_providers(self):
        """Gets the granted_providers of this PermissionGrantInfoDto.  # noqa: E501


        :return: The granted_providers of this PermissionGrantInfoDto.  # noqa: E501
        :rtype: list[ProviderInfoDto]
        """
        return self._granted_providers

    @granted_providers.setter
    def granted_providers(self, granted_providers):
        """Sets the granted_providers of this PermissionGrantInfoDto.


        :param granted_providers: The granted_providers of this PermissionGrantInfoDto.  # noqa: E501
        :type granted_providers: list[ProviderInfoDto]
        """

        self._granted_providers = granted_providers

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionGrantInfoDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PermissionGrantInfoDto):
            return True

        return self.to_dict() != other.to_dict()
