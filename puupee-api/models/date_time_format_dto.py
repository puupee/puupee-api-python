# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class DateTimeFormatDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'calendar_algorithm_type': 'str',
        'date_time_format_long': 'str',
        'short_date_pattern': 'str',
        'full_date_time_pattern': 'str',
        'date_separator': 'str',
        'short_time_pattern': 'str',
        'long_time_pattern': 'str'
    }

    attribute_map = {
        'calendar_algorithm_type': 'calendarAlgorithmType',
        'date_time_format_long': 'dateTimeFormatLong',
        'short_date_pattern': 'shortDatePattern',
        'full_date_time_pattern': 'fullDateTimePattern',
        'date_separator': 'dateSeparator',
        'short_time_pattern': 'shortTimePattern',
        'long_time_pattern': 'longTimePattern'
    }

    def __init__(self, calendar_algorithm_type=None, date_time_format_long=None, short_date_pattern=None, full_date_time_pattern=None, date_separator=None, short_time_pattern=None, long_time_pattern=None, local_vars_configuration=None):  # noqa: E501
        """DateTimeFormatDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._calendar_algorithm_type = None
        self._date_time_format_long = None
        self._short_date_pattern = None
        self._full_date_time_pattern = None
        self._date_separator = None
        self._short_time_pattern = None
        self._long_time_pattern = None
        self.discriminator = None

        self.calendar_algorithm_type = calendar_algorithm_type
        self.date_time_format_long = date_time_format_long
        self.short_date_pattern = short_date_pattern
        self.full_date_time_pattern = full_date_time_pattern
        self.date_separator = date_separator
        self.short_time_pattern = short_time_pattern
        self.long_time_pattern = long_time_pattern

    @property
    def calendar_algorithm_type(self):
        """Gets the calendar_algorithm_type of this DateTimeFormatDto.  # noqa: E501


        :return: The calendar_algorithm_type of this DateTimeFormatDto.  # noqa: E501
        :rtype: str
        """
        return self._calendar_algorithm_type

    @calendar_algorithm_type.setter
    def calendar_algorithm_type(self, calendar_algorithm_type):
        """Sets the calendar_algorithm_type of this DateTimeFormatDto.


        :param calendar_algorithm_type: The calendar_algorithm_type of this DateTimeFormatDto.  # noqa: E501
        :type calendar_algorithm_type: str
        """

        self._calendar_algorithm_type = calendar_algorithm_type

    @property
    def date_time_format_long(self):
        """Gets the date_time_format_long of this DateTimeFormatDto.  # noqa: E501


        :return: The date_time_format_long of this DateTimeFormatDto.  # noqa: E501
        :rtype: str
        """
        return self._date_time_format_long

    @date_time_format_long.setter
    def date_time_format_long(self, date_time_format_long):
        """Sets the date_time_format_long of this DateTimeFormatDto.


        :param date_time_format_long: The date_time_format_long of this DateTimeFormatDto.  # noqa: E501
        :type date_time_format_long: str
        """

        self._date_time_format_long = date_time_format_long

    @property
    def short_date_pattern(self):
        """Gets the short_date_pattern of this DateTimeFormatDto.  # noqa: E501


        :return: The short_date_pattern of this DateTimeFormatDto.  # noqa: E501
        :rtype: str
        """
        return self._short_date_pattern

    @short_date_pattern.setter
    def short_date_pattern(self, short_date_pattern):
        """Sets the short_date_pattern of this DateTimeFormatDto.


        :param short_date_pattern: The short_date_pattern of this DateTimeFormatDto.  # noqa: E501
        :type short_date_pattern: str
        """

        self._short_date_pattern = short_date_pattern

    @property
    def full_date_time_pattern(self):
        """Gets the full_date_time_pattern of this DateTimeFormatDto.  # noqa: E501


        :return: The full_date_time_pattern of this DateTimeFormatDto.  # noqa: E501
        :rtype: str
        """
        return self._full_date_time_pattern

    @full_date_time_pattern.setter
    def full_date_time_pattern(self, full_date_time_pattern):
        """Sets the full_date_time_pattern of this DateTimeFormatDto.


        :param full_date_time_pattern: The full_date_time_pattern of this DateTimeFormatDto.  # noqa: E501
        :type full_date_time_pattern: str
        """

        self._full_date_time_pattern = full_date_time_pattern

    @property
    def date_separator(self):
        """Gets the date_separator of this DateTimeFormatDto.  # noqa: E501


        :return: The date_separator of this DateTimeFormatDto.  # noqa: E501
        :rtype: str
        """
        return self._date_separator

    @date_separator.setter
    def date_separator(self, date_separator):
        """Sets the date_separator of this DateTimeFormatDto.


        :param date_separator: The date_separator of this DateTimeFormatDto.  # noqa: E501
        :type date_separator: str
        """

        self._date_separator = date_separator

    @property
    def short_time_pattern(self):
        """Gets the short_time_pattern of this DateTimeFormatDto.  # noqa: E501


        :return: The short_time_pattern of this DateTimeFormatDto.  # noqa: E501
        :rtype: str
        """
        return self._short_time_pattern

    @short_time_pattern.setter
    def short_time_pattern(self, short_time_pattern):
        """Sets the short_time_pattern of this DateTimeFormatDto.


        :param short_time_pattern: The short_time_pattern of this DateTimeFormatDto.  # noqa: E501
        :type short_time_pattern: str
        """

        self._short_time_pattern = short_time_pattern

    @property
    def long_time_pattern(self):
        """Gets the long_time_pattern of this DateTimeFormatDto.  # noqa: E501


        :return: The long_time_pattern of this DateTimeFormatDto.  # noqa: E501
        :rtype: str
        """
        return self._long_time_pattern

    @long_time_pattern.setter
    def long_time_pattern(self, long_time_pattern):
        """Sets the long_time_pattern of this DateTimeFormatDto.


        :param long_time_pattern: The long_time_pattern of this DateTimeFormatDto.  # noqa: E501
        :type long_time_pattern: str
        """

        self._long_time_pattern = long_time_pattern

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DateTimeFormatDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DateTimeFormatDto):
            return True

        return self.to_dict() != other.to_dict()
