# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class ProfileDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'extra_properties': 'dict[str, object]',
        'user_name': 'str',
        'email': 'str',
        'name': 'str',
        'surname': 'str',
        'phone_number': 'str',
        'is_external': 'bool',
        'has_password': 'bool',
        'concurrency_stamp': 'str'
    }

    attribute_map = {
        'extra_properties': 'extraProperties',
        'user_name': 'userName',
        'email': 'email',
        'name': 'name',
        'surname': 'surname',
        'phone_number': 'phoneNumber',
        'is_external': 'isExternal',
        'has_password': 'hasPassword',
        'concurrency_stamp': 'concurrencyStamp'
    }

    def __init__(self, extra_properties=None, user_name=None, email=None, name=None, surname=None, phone_number=None, is_external=None, has_password=None, concurrency_stamp=None, local_vars_configuration=None):  # noqa: E501
        """ProfileDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._extra_properties = None
        self._user_name = None
        self._email = None
        self._name = None
        self._surname = None
        self._phone_number = None
        self._is_external = None
        self._has_password = None
        self._concurrency_stamp = None
        self.discriminator = None

        self.extra_properties = extra_properties
        self.user_name = user_name
        self.email = email
        self.name = name
        self.surname = surname
        self.phone_number = phone_number
        if is_external is not None:
            self.is_external = is_external
        if has_password is not None:
            self.has_password = has_password
        self.concurrency_stamp = concurrency_stamp

    @property
    def extra_properties(self):
        """Gets the extra_properties of this ProfileDto.  # noqa: E501


        :return: The extra_properties of this ProfileDto.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._extra_properties

    @extra_properties.setter
    def extra_properties(self, extra_properties):
        """Sets the extra_properties of this ProfileDto.


        :param extra_properties: The extra_properties of this ProfileDto.  # noqa: E501
        :type extra_properties: dict[str, object]
        """

        self._extra_properties = extra_properties

    @property
    def user_name(self):
        """Gets the user_name of this ProfileDto.  # noqa: E501


        :return: The user_name of this ProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ProfileDto.


        :param user_name: The user_name of this ProfileDto.  # noqa: E501
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def email(self):
        """Gets the email of this ProfileDto.  # noqa: E501


        :return: The email of this ProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProfileDto.


        :param email: The email of this ProfileDto.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this ProfileDto.  # noqa: E501


        :return: The name of this ProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProfileDto.


        :param name: The name of this ProfileDto.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def surname(self):
        """Gets the surname of this ProfileDto.  # noqa: E501


        :return: The surname of this ProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this ProfileDto.


        :param surname: The surname of this ProfileDto.  # noqa: E501
        :type surname: str
        """

        self._surname = surname

    @property
    def phone_number(self):
        """Gets the phone_number of this ProfileDto.  # noqa: E501


        :return: The phone_number of this ProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ProfileDto.


        :param phone_number: The phone_number of this ProfileDto.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def is_external(self):
        """Gets the is_external of this ProfileDto.  # noqa: E501


        :return: The is_external of this ProfileDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_external

    @is_external.setter
    def is_external(self, is_external):
        """Sets the is_external of this ProfileDto.


        :param is_external: The is_external of this ProfileDto.  # noqa: E501
        :type is_external: bool
        """

        self._is_external = is_external

    @property
    def has_password(self):
        """Gets the has_password of this ProfileDto.  # noqa: E501


        :return: The has_password of this ProfileDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password):
        """Sets the has_password of this ProfileDto.


        :param has_password: The has_password of this ProfileDto.  # noqa: E501
        :type has_password: bool
        """

        self._has_password = has_password

    @property
    def concurrency_stamp(self):
        """Gets the concurrency_stamp of this ProfileDto.  # noqa: E501


        :return: The concurrency_stamp of this ProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._concurrency_stamp

    @concurrency_stamp.setter
    def concurrency_stamp(self, concurrency_stamp):
        """Sets the concurrency_stamp of this ProfileDto.


        :param concurrency_stamp: The concurrency_stamp of this ProfileDto.  # noqa: E501
        :type concurrency_stamp: str
        """

        self._concurrency_stamp = concurrency_stamp

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProfileDto):
            return True

        return self.to_dict() != other.to_dict()
