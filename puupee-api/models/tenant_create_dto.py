# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class TenantCreateDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'extra_properties': 'dict[str, object]',
        'name': 'str',
        'admin_email_address': 'str',
        'admin_password': 'str'
    }

    attribute_map = {
        'extra_properties': 'extraProperties',
        'name': 'name',
        'admin_email_address': 'adminEmailAddress',
        'admin_password': 'adminPassword'
    }

    def __init__(self, extra_properties=None, name=None, admin_email_address=None, admin_password=None, local_vars_configuration=None):  # noqa: E501
        """TenantCreateDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._extra_properties = None
        self._name = None
        self._admin_email_address = None
        self._admin_password = None
        self.discriminator = None

        self.extra_properties = extra_properties
        self.name = name
        self.admin_email_address = admin_email_address
        self.admin_password = admin_password

    @property
    def extra_properties(self):
        """Gets the extra_properties of this TenantCreateDto.  # noqa: E501


        :return: The extra_properties of this TenantCreateDto.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._extra_properties

    @extra_properties.setter
    def extra_properties(self, extra_properties):
        """Sets the extra_properties of this TenantCreateDto.


        :param extra_properties: The extra_properties of this TenantCreateDto.  # noqa: E501
        :type extra_properties: dict[str, object]
        """

        self._extra_properties = extra_properties

    @property
    def name(self):
        """Gets the name of this TenantCreateDto.  # noqa: E501


        :return: The name of this TenantCreateDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TenantCreateDto.


        :param name: The name of this TenantCreateDto.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 64):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def admin_email_address(self):
        """Gets the admin_email_address of this TenantCreateDto.  # noqa: E501


        :return: The admin_email_address of this TenantCreateDto.  # noqa: E501
        :rtype: str
        """
        return self._admin_email_address

    @admin_email_address.setter
    def admin_email_address(self, admin_email_address):
        """Sets the admin_email_address of this TenantCreateDto.


        :param admin_email_address: The admin_email_address of this TenantCreateDto.  # noqa: E501
        :type admin_email_address: str
        """
        if self.local_vars_configuration.client_side_validation and admin_email_address is None:  # noqa: E501
            raise ValueError("Invalid value for `admin_email_address`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                admin_email_address is not None and len(admin_email_address) > 256):
            raise ValueError("Invalid value for `admin_email_address`, length must be less than or equal to `256`")  # noqa: E501

        self._admin_email_address = admin_email_address

    @property
    def admin_password(self):
        """Gets the admin_password of this TenantCreateDto.  # noqa: E501


        :return: The admin_password of this TenantCreateDto.  # noqa: E501
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this TenantCreateDto.


        :param admin_password: The admin_password of this TenantCreateDto.  # noqa: E501
        :type admin_password: str
        """
        if self.local_vars_configuration.client_side_validation and admin_password is None:  # noqa: E501
            raise ValueError("Invalid value for `admin_password`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                admin_password is not None and len(admin_password) > 128):
            raise ValueError("Invalid value for `admin_password`, length must be less than or equal to `128`")  # noqa: E501

        self._admin_password = admin_password

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TenantCreateDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TenantCreateDto):
            return True

        return self.to_dict() != other.to_dict()
