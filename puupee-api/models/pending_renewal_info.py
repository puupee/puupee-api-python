# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class PendingRenewalInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto_renew_product_id': 'str',
        'auto_renew_status': 'str',
        'is_in_billing_retry_period': 'str',
        'original_transaction_id': 'str',
        'product_id': 'str',
        'expiration_intent': 'str',
        'price_consent_status': 'str',
        'grace_period_expires_date': 'str',
        'grace_period_expires_date_ms': 'str',
        'grace_period_expires_date_pst': 'str'
    }

    attribute_map = {
        'auto_renew_product_id': 'auto_renew_product_id',
        'auto_renew_status': 'auto_renew_status',
        'is_in_billing_retry_period': 'is_in_billing_retry_period',
        'original_transaction_id': 'original_transaction_id',
        'product_id': 'product_id',
        'expiration_intent': 'expiration_intent',
        'price_consent_status': 'price_consent_status',
        'grace_period_expires_date': 'grace_period_expires_date',
        'grace_period_expires_date_ms': 'grace_period_expires_date_ms',
        'grace_period_expires_date_pst': 'grace_period_expires_date_pst'
    }

    def __init__(self, auto_renew_product_id=None, auto_renew_status=None, is_in_billing_retry_period=None, original_transaction_id=None, product_id=None, expiration_intent=None, price_consent_status=None, grace_period_expires_date=None, grace_period_expires_date_ms=None, grace_period_expires_date_pst=None, local_vars_configuration=None):  # noqa: E501
        """PendingRenewalInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._auto_renew_product_id = None
        self._auto_renew_status = None
        self._is_in_billing_retry_period = None
        self._original_transaction_id = None
        self._product_id = None
        self._expiration_intent = None
        self._price_consent_status = None
        self._grace_period_expires_date = None
        self._grace_period_expires_date_ms = None
        self._grace_period_expires_date_pst = None
        self.discriminator = None

        self.auto_renew_product_id = auto_renew_product_id
        self.auto_renew_status = auto_renew_status
        self.is_in_billing_retry_period = is_in_billing_retry_period
        self.original_transaction_id = original_transaction_id
        self.product_id = product_id
        self.expiration_intent = expiration_intent
        self.price_consent_status = price_consent_status
        self.grace_period_expires_date = grace_period_expires_date
        self.grace_period_expires_date_ms = grace_period_expires_date_ms
        self.grace_period_expires_date_pst = grace_period_expires_date_pst

    @property
    def auto_renew_product_id(self):
        """Gets the auto_renew_product_id of this PendingRenewalInfo.  # noqa: E501


        :return: The auto_renew_product_id of this PendingRenewalInfo.  # noqa: E501
        :rtype: str
        """
        return self._auto_renew_product_id

    @auto_renew_product_id.setter
    def auto_renew_product_id(self, auto_renew_product_id):
        """Sets the auto_renew_product_id of this PendingRenewalInfo.


        :param auto_renew_product_id: The auto_renew_product_id of this PendingRenewalInfo.  # noqa: E501
        :type auto_renew_product_id: str
        """

        self._auto_renew_product_id = auto_renew_product_id

    @property
    def auto_renew_status(self):
        """Gets the auto_renew_status of this PendingRenewalInfo.  # noqa: E501


        :return: The auto_renew_status of this PendingRenewalInfo.  # noqa: E501
        :rtype: str
        """
        return self._auto_renew_status

    @auto_renew_status.setter
    def auto_renew_status(self, auto_renew_status):
        """Sets the auto_renew_status of this PendingRenewalInfo.


        :param auto_renew_status: The auto_renew_status of this PendingRenewalInfo.  # noqa: E501
        :type auto_renew_status: str
        """

        self._auto_renew_status = auto_renew_status

    @property
    def is_in_billing_retry_period(self):
        """Gets the is_in_billing_retry_period of this PendingRenewalInfo.  # noqa: E501


        :return: The is_in_billing_retry_period of this PendingRenewalInfo.  # noqa: E501
        :rtype: str
        """
        return self._is_in_billing_retry_period

    @is_in_billing_retry_period.setter
    def is_in_billing_retry_period(self, is_in_billing_retry_period):
        """Sets the is_in_billing_retry_period of this PendingRenewalInfo.


        :param is_in_billing_retry_period: The is_in_billing_retry_period of this PendingRenewalInfo.  # noqa: E501
        :type is_in_billing_retry_period: str
        """

        self._is_in_billing_retry_period = is_in_billing_retry_period

    @property
    def original_transaction_id(self):
        """Gets the original_transaction_id of this PendingRenewalInfo.  # noqa: E501


        :return: The original_transaction_id of this PendingRenewalInfo.  # noqa: E501
        :rtype: str
        """
        return self._original_transaction_id

    @original_transaction_id.setter
    def original_transaction_id(self, original_transaction_id):
        """Sets the original_transaction_id of this PendingRenewalInfo.


        :param original_transaction_id: The original_transaction_id of this PendingRenewalInfo.  # noqa: E501
        :type original_transaction_id: str
        """

        self._original_transaction_id = original_transaction_id

    @property
    def product_id(self):
        """Gets the product_id of this PendingRenewalInfo.  # noqa: E501


        :return: The product_id of this PendingRenewalInfo.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this PendingRenewalInfo.


        :param product_id: The product_id of this PendingRenewalInfo.  # noqa: E501
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def expiration_intent(self):
        """Gets the expiration_intent of this PendingRenewalInfo.  # noqa: E501


        :return: The expiration_intent of this PendingRenewalInfo.  # noqa: E501
        :rtype: str
        """
        return self._expiration_intent

    @expiration_intent.setter
    def expiration_intent(self, expiration_intent):
        """Sets the expiration_intent of this PendingRenewalInfo.


        :param expiration_intent: The expiration_intent of this PendingRenewalInfo.  # noqa: E501
        :type expiration_intent: str
        """

        self._expiration_intent = expiration_intent

    @property
    def price_consent_status(self):
        """Gets the price_consent_status of this PendingRenewalInfo.  # noqa: E501


        :return: The price_consent_status of this PendingRenewalInfo.  # noqa: E501
        :rtype: str
        """
        return self._price_consent_status

    @price_consent_status.setter
    def price_consent_status(self, price_consent_status):
        """Sets the price_consent_status of this PendingRenewalInfo.


        :param price_consent_status: The price_consent_status of this PendingRenewalInfo.  # noqa: E501
        :type price_consent_status: str
        """

        self._price_consent_status = price_consent_status

    @property
    def grace_period_expires_date(self):
        """Gets the grace_period_expires_date of this PendingRenewalInfo.  # noqa: E501


        :return: The grace_period_expires_date of this PendingRenewalInfo.  # noqa: E501
        :rtype: str
        """
        return self._grace_period_expires_date

    @grace_period_expires_date.setter
    def grace_period_expires_date(self, grace_period_expires_date):
        """Sets the grace_period_expires_date of this PendingRenewalInfo.


        :param grace_period_expires_date: The grace_period_expires_date of this PendingRenewalInfo.  # noqa: E501
        :type grace_period_expires_date: str
        """

        self._grace_period_expires_date = grace_period_expires_date

    @property
    def grace_period_expires_date_ms(self):
        """Gets the grace_period_expires_date_ms of this PendingRenewalInfo.  # noqa: E501


        :return: The grace_period_expires_date_ms of this PendingRenewalInfo.  # noqa: E501
        :rtype: str
        """
        return self._grace_period_expires_date_ms

    @grace_period_expires_date_ms.setter
    def grace_period_expires_date_ms(self, grace_period_expires_date_ms):
        """Sets the grace_period_expires_date_ms of this PendingRenewalInfo.


        :param grace_period_expires_date_ms: The grace_period_expires_date_ms of this PendingRenewalInfo.  # noqa: E501
        :type grace_period_expires_date_ms: str
        """

        self._grace_period_expires_date_ms = grace_period_expires_date_ms

    @property
    def grace_period_expires_date_pst(self):
        """Gets the grace_period_expires_date_pst of this PendingRenewalInfo.  # noqa: E501


        :return: The grace_period_expires_date_pst of this PendingRenewalInfo.  # noqa: E501
        :rtype: str
        """
        return self._grace_period_expires_date_pst

    @grace_period_expires_date_pst.setter
    def grace_period_expires_date_pst(self, grace_period_expires_date_pst):
        """Sets the grace_period_expires_date_pst of this PendingRenewalInfo.


        :param grace_period_expires_date_pst: The grace_period_expires_date_pst of this PendingRenewalInfo.  # noqa: E501
        :type grace_period_expires_date_pst: str
        """

        self._grace_period_expires_date_pst = grace_period_expires_date_pst

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PendingRenewalInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PendingRenewalInfo):
            return True

        return self.to_dict() != other.to_dict()
