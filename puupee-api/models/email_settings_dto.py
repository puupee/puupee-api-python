# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class EmailSettingsDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'smtp_host': 'str',
        'smtp_port': 'int',
        'smtp_user_name': 'str',
        'smtp_password': 'str',
        'smtp_domain': 'str',
        'smtp_enable_ssl': 'bool',
        'smtp_use_default_credentials': 'bool',
        'default_from_address': 'str',
        'default_from_display_name': 'str'
    }

    attribute_map = {
        'smtp_host': 'smtpHost',
        'smtp_port': 'smtpPort',
        'smtp_user_name': 'smtpUserName',
        'smtp_password': 'smtpPassword',
        'smtp_domain': 'smtpDomain',
        'smtp_enable_ssl': 'smtpEnableSsl',
        'smtp_use_default_credentials': 'smtpUseDefaultCredentials',
        'default_from_address': 'defaultFromAddress',
        'default_from_display_name': 'defaultFromDisplayName'
    }

    def __init__(self, smtp_host=None, smtp_port=None, smtp_user_name=None, smtp_password=None, smtp_domain=None, smtp_enable_ssl=None, smtp_use_default_credentials=None, default_from_address=None, default_from_display_name=None, local_vars_configuration=None):  # noqa: E501
        """EmailSettingsDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._smtp_host = None
        self._smtp_port = None
        self._smtp_user_name = None
        self._smtp_password = None
        self._smtp_domain = None
        self._smtp_enable_ssl = None
        self._smtp_use_default_credentials = None
        self._default_from_address = None
        self._default_from_display_name = None
        self.discriminator = None

        self.smtp_host = smtp_host
        if smtp_port is not None:
            self.smtp_port = smtp_port
        self.smtp_user_name = smtp_user_name
        self.smtp_password = smtp_password
        self.smtp_domain = smtp_domain
        if smtp_enable_ssl is not None:
            self.smtp_enable_ssl = smtp_enable_ssl
        if smtp_use_default_credentials is not None:
            self.smtp_use_default_credentials = smtp_use_default_credentials
        self.default_from_address = default_from_address
        self.default_from_display_name = default_from_display_name

    @property
    def smtp_host(self):
        """Gets the smtp_host of this EmailSettingsDto.  # noqa: E501


        :return: The smtp_host of this EmailSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._smtp_host

    @smtp_host.setter
    def smtp_host(self, smtp_host):
        """Sets the smtp_host of this EmailSettingsDto.


        :param smtp_host: The smtp_host of this EmailSettingsDto.  # noqa: E501
        :type smtp_host: str
        """

        self._smtp_host = smtp_host

    @property
    def smtp_port(self):
        """Gets the smtp_port of this EmailSettingsDto.  # noqa: E501


        :return: The smtp_port of this EmailSettingsDto.  # noqa: E501
        :rtype: int
        """
        return self._smtp_port

    @smtp_port.setter
    def smtp_port(self, smtp_port):
        """Sets the smtp_port of this EmailSettingsDto.


        :param smtp_port: The smtp_port of this EmailSettingsDto.  # noqa: E501
        :type smtp_port: int
        """

        self._smtp_port = smtp_port

    @property
    def smtp_user_name(self):
        """Gets the smtp_user_name of this EmailSettingsDto.  # noqa: E501


        :return: The smtp_user_name of this EmailSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._smtp_user_name

    @smtp_user_name.setter
    def smtp_user_name(self, smtp_user_name):
        """Sets the smtp_user_name of this EmailSettingsDto.


        :param smtp_user_name: The smtp_user_name of this EmailSettingsDto.  # noqa: E501
        :type smtp_user_name: str
        """

        self._smtp_user_name = smtp_user_name

    @property
    def smtp_password(self):
        """Gets the smtp_password of this EmailSettingsDto.  # noqa: E501


        :return: The smtp_password of this EmailSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._smtp_password

    @smtp_password.setter
    def smtp_password(self, smtp_password):
        """Sets the smtp_password of this EmailSettingsDto.


        :param smtp_password: The smtp_password of this EmailSettingsDto.  # noqa: E501
        :type smtp_password: str
        """

        self._smtp_password = smtp_password

    @property
    def smtp_domain(self):
        """Gets the smtp_domain of this EmailSettingsDto.  # noqa: E501


        :return: The smtp_domain of this EmailSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._smtp_domain

    @smtp_domain.setter
    def smtp_domain(self, smtp_domain):
        """Sets the smtp_domain of this EmailSettingsDto.


        :param smtp_domain: The smtp_domain of this EmailSettingsDto.  # noqa: E501
        :type smtp_domain: str
        """

        self._smtp_domain = smtp_domain

    @property
    def smtp_enable_ssl(self):
        """Gets the smtp_enable_ssl of this EmailSettingsDto.  # noqa: E501


        :return: The smtp_enable_ssl of this EmailSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._smtp_enable_ssl

    @smtp_enable_ssl.setter
    def smtp_enable_ssl(self, smtp_enable_ssl):
        """Sets the smtp_enable_ssl of this EmailSettingsDto.


        :param smtp_enable_ssl: The smtp_enable_ssl of this EmailSettingsDto.  # noqa: E501
        :type smtp_enable_ssl: bool
        """

        self._smtp_enable_ssl = smtp_enable_ssl

    @property
    def smtp_use_default_credentials(self):
        """Gets the smtp_use_default_credentials of this EmailSettingsDto.  # noqa: E501


        :return: The smtp_use_default_credentials of this EmailSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._smtp_use_default_credentials

    @smtp_use_default_credentials.setter
    def smtp_use_default_credentials(self, smtp_use_default_credentials):
        """Sets the smtp_use_default_credentials of this EmailSettingsDto.


        :param smtp_use_default_credentials: The smtp_use_default_credentials of this EmailSettingsDto.  # noqa: E501
        :type smtp_use_default_credentials: bool
        """

        self._smtp_use_default_credentials = smtp_use_default_credentials

    @property
    def default_from_address(self):
        """Gets the default_from_address of this EmailSettingsDto.  # noqa: E501


        :return: The default_from_address of this EmailSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._default_from_address

    @default_from_address.setter
    def default_from_address(self, default_from_address):
        """Sets the default_from_address of this EmailSettingsDto.


        :param default_from_address: The default_from_address of this EmailSettingsDto.  # noqa: E501
        :type default_from_address: str
        """

        self._default_from_address = default_from_address

    @property
    def default_from_display_name(self):
        """Gets the default_from_display_name of this EmailSettingsDto.  # noqa: E501


        :return: The default_from_display_name of this EmailSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._default_from_display_name

    @default_from_display_name.setter
    def default_from_display_name(self, default_from_display_name):
        """Sets the default_from_display_name of this EmailSettingsDto.


        :param default_from_display_name: The default_from_display_name of this EmailSettingsDto.  # noqa: E501
        :type default_from_display_name: str
        """

        self._default_from_display_name = default_from_display_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailSettingsDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailSettingsDto):
            return True

        return self.to_dict() != other.to_dict()
