# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class SendTestEmailInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sender_email_address': 'str',
        'target_email_address': 'str',
        'subject': 'str',
        'body': 'str'
    }

    attribute_map = {
        'sender_email_address': 'senderEmailAddress',
        'target_email_address': 'targetEmailAddress',
        'subject': 'subject',
        'body': 'body'
    }

    def __init__(self, sender_email_address=None, target_email_address=None, subject=None, body=None, local_vars_configuration=None):  # noqa: E501
        """SendTestEmailInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._sender_email_address = None
        self._target_email_address = None
        self._subject = None
        self._body = None
        self.discriminator = None

        self.sender_email_address = sender_email_address
        self.target_email_address = target_email_address
        self.subject = subject
        self.body = body

    @property
    def sender_email_address(self):
        """Gets the sender_email_address of this SendTestEmailInput.  # noqa: E501


        :return: The sender_email_address of this SendTestEmailInput.  # noqa: E501
        :rtype: str
        """
        return self._sender_email_address

    @sender_email_address.setter
    def sender_email_address(self, sender_email_address):
        """Sets the sender_email_address of this SendTestEmailInput.


        :param sender_email_address: The sender_email_address of this SendTestEmailInput.  # noqa: E501
        :type sender_email_address: str
        """
        if self.local_vars_configuration.client_side_validation and sender_email_address is None:  # noqa: E501
            raise ValueError("Invalid value for `sender_email_address`, must not be `None`")  # noqa: E501

        self._sender_email_address = sender_email_address

    @property
    def target_email_address(self):
        """Gets the target_email_address of this SendTestEmailInput.  # noqa: E501


        :return: The target_email_address of this SendTestEmailInput.  # noqa: E501
        :rtype: str
        """
        return self._target_email_address

    @target_email_address.setter
    def target_email_address(self, target_email_address):
        """Sets the target_email_address of this SendTestEmailInput.


        :param target_email_address: The target_email_address of this SendTestEmailInput.  # noqa: E501
        :type target_email_address: str
        """
        if self.local_vars_configuration.client_side_validation and target_email_address is None:  # noqa: E501
            raise ValueError("Invalid value for `target_email_address`, must not be `None`")  # noqa: E501

        self._target_email_address = target_email_address

    @property
    def subject(self):
        """Gets the subject of this SendTestEmailInput.  # noqa: E501


        :return: The subject of this SendTestEmailInput.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendTestEmailInput.


        :param subject: The subject of this SendTestEmailInput.  # noqa: E501
        :type subject: str
        """
        if self.local_vars_configuration.client_side_validation and subject is None:  # noqa: E501
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this SendTestEmailInput.  # noqa: E501


        :return: The body of this SendTestEmailInput.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SendTestEmailInput.


        :param body: The body of this SendTestEmailInput.  # noqa: E501
        :type body: str
        """

        self._body = body

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendTestEmailInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SendTestEmailInput):
            return True

        return self.to_dict() != other.to_dict()
