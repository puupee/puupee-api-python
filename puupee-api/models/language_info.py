# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class LanguageInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'culture_name': 'str',
        'ui_culture_name': 'str',
        'display_name': 'str',
        'two_letter_iso_language_name': 'str',
        'flag_icon': 'str'
    }

    attribute_map = {
        'culture_name': 'cultureName',
        'ui_culture_name': 'uiCultureName',
        'display_name': 'displayName',
        'two_letter_iso_language_name': 'twoLetterISOLanguageName',
        'flag_icon': 'flagIcon'
    }

    def __init__(self, culture_name=None, ui_culture_name=None, display_name=None, two_letter_iso_language_name=None, flag_icon=None, local_vars_configuration=None):  # noqa: E501
        """LanguageInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._culture_name = None
        self._ui_culture_name = None
        self._display_name = None
        self._two_letter_iso_language_name = None
        self._flag_icon = None
        self.discriminator = None

        self.culture_name = culture_name
        self.ui_culture_name = ui_culture_name
        self.display_name = display_name
        self.two_letter_iso_language_name = two_letter_iso_language_name
        self.flag_icon = flag_icon

    @property
    def culture_name(self):
        """Gets the culture_name of this LanguageInfo.  # noqa: E501


        :return: The culture_name of this LanguageInfo.  # noqa: E501
        :rtype: str
        """
        return self._culture_name

    @culture_name.setter
    def culture_name(self, culture_name):
        """Sets the culture_name of this LanguageInfo.


        :param culture_name: The culture_name of this LanguageInfo.  # noqa: E501
        :type culture_name: str
        """

        self._culture_name = culture_name

    @property
    def ui_culture_name(self):
        """Gets the ui_culture_name of this LanguageInfo.  # noqa: E501


        :return: The ui_culture_name of this LanguageInfo.  # noqa: E501
        :rtype: str
        """
        return self._ui_culture_name

    @ui_culture_name.setter
    def ui_culture_name(self, ui_culture_name):
        """Sets the ui_culture_name of this LanguageInfo.


        :param ui_culture_name: The ui_culture_name of this LanguageInfo.  # noqa: E501
        :type ui_culture_name: str
        """

        self._ui_culture_name = ui_culture_name

    @property
    def display_name(self):
        """Gets the display_name of this LanguageInfo.  # noqa: E501


        :return: The display_name of this LanguageInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LanguageInfo.


        :param display_name: The display_name of this LanguageInfo.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def two_letter_iso_language_name(self):
        """Gets the two_letter_iso_language_name of this LanguageInfo.  # noqa: E501


        :return: The two_letter_iso_language_name of this LanguageInfo.  # noqa: E501
        :rtype: str
        """
        return self._two_letter_iso_language_name

    @two_letter_iso_language_name.setter
    def two_letter_iso_language_name(self, two_letter_iso_language_name):
        """Sets the two_letter_iso_language_name of this LanguageInfo.


        :param two_letter_iso_language_name: The two_letter_iso_language_name of this LanguageInfo.  # noqa: E501
        :type two_letter_iso_language_name: str
        """

        self._two_letter_iso_language_name = two_letter_iso_language_name

    @property
    def flag_icon(self):
        """Gets the flag_icon of this LanguageInfo.  # noqa: E501


        :return: The flag_icon of this LanguageInfo.  # noqa: E501
        :rtype: str
        """
        return self._flag_icon

    @flag_icon.setter
    def flag_icon(self, flag_icon):
        """Sets the flag_icon of this LanguageInfo.


        :param flag_icon: The flag_icon of this LanguageInfo.  # noqa: E501
        :type flag_icon: str
        """

        self._flag_icon = flag_icon

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LanguageInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LanguageInfo):
            return True

        return self.to_dict() != other.to_dict()
