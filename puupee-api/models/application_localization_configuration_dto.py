# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class ApplicationLocalizationConfigurationDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'values': 'dict[str, dict[str, str]]',
        'resources': 'dict[str, ApplicationLocalizationResourceDto]',
        'languages': 'list[LanguageInfo]',
        'current_culture': 'CurrentCultureDto',
        'default_resource_name': 'str',
        'languages_map': 'dict[str, list[NameValue]]',
        'language_files_map': 'dict[str, list[NameValue]]'
    }

    attribute_map = {
        'values': 'values',
        'resources': 'resources',
        'languages': 'languages',
        'current_culture': 'currentCulture',
        'default_resource_name': 'defaultResourceName',
        'languages_map': 'languagesMap',
        'language_files_map': 'languageFilesMap'
    }

    def __init__(self, values=None, resources=None, languages=None, current_culture=None, default_resource_name=None, languages_map=None, language_files_map=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationLocalizationConfigurationDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._values = None
        self._resources = None
        self._languages = None
        self._current_culture = None
        self._default_resource_name = None
        self._languages_map = None
        self._language_files_map = None
        self.discriminator = None

        self.values = values
        self.resources = resources
        self.languages = languages
        if current_culture is not None:
            self.current_culture = current_culture
        self.default_resource_name = default_resource_name
        self.languages_map = languages_map
        self.language_files_map = language_files_map

    @property
    def values(self):
        """Gets the values of this ApplicationLocalizationConfigurationDto.  # noqa: E501


        :return: The values of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :rtype: dict[str, dict[str, str]]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ApplicationLocalizationConfigurationDto.


        :param values: The values of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :type values: dict[str, dict[str, str]]
        """

        self._values = values

    @property
    def resources(self):
        """Gets the resources of this ApplicationLocalizationConfigurationDto.  # noqa: E501


        :return: The resources of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :rtype: dict[str, ApplicationLocalizationResourceDto]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ApplicationLocalizationConfigurationDto.


        :param resources: The resources of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :type resources: dict[str, ApplicationLocalizationResourceDto]
        """

        self._resources = resources

    @property
    def languages(self):
        """Gets the languages of this ApplicationLocalizationConfigurationDto.  # noqa: E501


        :return: The languages of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :rtype: list[LanguageInfo]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this ApplicationLocalizationConfigurationDto.


        :param languages: The languages of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :type languages: list[LanguageInfo]
        """

        self._languages = languages

    @property
    def current_culture(self):
        """Gets the current_culture of this ApplicationLocalizationConfigurationDto.  # noqa: E501


        :return: The current_culture of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :rtype: CurrentCultureDto
        """
        return self._current_culture

    @current_culture.setter
    def current_culture(self, current_culture):
        """Sets the current_culture of this ApplicationLocalizationConfigurationDto.


        :param current_culture: The current_culture of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :type current_culture: CurrentCultureDto
        """

        self._current_culture = current_culture

    @property
    def default_resource_name(self):
        """Gets the default_resource_name of this ApplicationLocalizationConfigurationDto.  # noqa: E501


        :return: The default_resource_name of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :rtype: str
        """
        return self._default_resource_name

    @default_resource_name.setter
    def default_resource_name(self, default_resource_name):
        """Sets the default_resource_name of this ApplicationLocalizationConfigurationDto.


        :param default_resource_name: The default_resource_name of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :type default_resource_name: str
        """

        self._default_resource_name = default_resource_name

    @property
    def languages_map(self):
        """Gets the languages_map of this ApplicationLocalizationConfigurationDto.  # noqa: E501


        :return: The languages_map of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :rtype: dict[str, list[NameValue]]
        """
        return self._languages_map

    @languages_map.setter
    def languages_map(self, languages_map):
        """Sets the languages_map of this ApplicationLocalizationConfigurationDto.


        :param languages_map: The languages_map of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :type languages_map: dict[str, list[NameValue]]
        """

        self._languages_map = languages_map

    @property
    def language_files_map(self):
        """Gets the language_files_map of this ApplicationLocalizationConfigurationDto.  # noqa: E501


        :return: The language_files_map of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :rtype: dict[str, list[NameValue]]
        """
        return self._language_files_map

    @language_files_map.setter
    def language_files_map(self, language_files_map):
        """Sets the language_files_map of this ApplicationLocalizationConfigurationDto.


        :param language_files_map: The language_files_map of this ApplicationLocalizationConfigurationDto.  # noqa: E501
        :type language_files_map: dict[str, list[NameValue]]
        """

        self._language_files_map = language_files_map

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationLocalizationConfigurationDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationLocalizationConfigurationDto):
            return True

        return self.to_dict() != other.to_dict()
