# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class ControllerApiDescriptionModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'controller_name': 'str',
        'controller_group_name': 'str',
        'is_remote_service': 'bool',
        'is_integration_service': 'bool',
        'api_version': 'str',
        'type': 'str',
        'interfaces': 'list[ControllerInterfaceApiDescriptionModel]',
        'actions': 'dict[str, ActionApiDescriptionModel]'
    }

    attribute_map = {
        'controller_name': 'controllerName',
        'controller_group_name': 'controllerGroupName',
        'is_remote_service': 'isRemoteService',
        'is_integration_service': 'isIntegrationService',
        'api_version': 'apiVersion',
        'type': 'type',
        'interfaces': 'interfaces',
        'actions': 'actions'
    }

    def __init__(self, controller_name=None, controller_group_name=None, is_remote_service=None, is_integration_service=None, api_version=None, type=None, interfaces=None, actions=None, local_vars_configuration=None):  # noqa: E501
        """ControllerApiDescriptionModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._controller_name = None
        self._controller_group_name = None
        self._is_remote_service = None
        self._is_integration_service = None
        self._api_version = None
        self._type = None
        self._interfaces = None
        self._actions = None
        self.discriminator = None

        self.controller_name = controller_name
        self.controller_group_name = controller_group_name
        if is_remote_service is not None:
            self.is_remote_service = is_remote_service
        if is_integration_service is not None:
            self.is_integration_service = is_integration_service
        self.api_version = api_version
        self.type = type
        self.interfaces = interfaces
        self.actions = actions

    @property
    def controller_name(self):
        """Gets the controller_name of this ControllerApiDescriptionModel.  # noqa: E501


        :return: The controller_name of this ControllerApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._controller_name

    @controller_name.setter
    def controller_name(self, controller_name):
        """Sets the controller_name of this ControllerApiDescriptionModel.


        :param controller_name: The controller_name of this ControllerApiDescriptionModel.  # noqa: E501
        :type controller_name: str
        """

        self._controller_name = controller_name

    @property
    def controller_group_name(self):
        """Gets the controller_group_name of this ControllerApiDescriptionModel.  # noqa: E501


        :return: The controller_group_name of this ControllerApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._controller_group_name

    @controller_group_name.setter
    def controller_group_name(self, controller_group_name):
        """Sets the controller_group_name of this ControllerApiDescriptionModel.


        :param controller_group_name: The controller_group_name of this ControllerApiDescriptionModel.  # noqa: E501
        :type controller_group_name: str
        """

        self._controller_group_name = controller_group_name

    @property
    def is_remote_service(self):
        """Gets the is_remote_service of this ControllerApiDescriptionModel.  # noqa: E501


        :return: The is_remote_service of this ControllerApiDescriptionModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_remote_service

    @is_remote_service.setter
    def is_remote_service(self, is_remote_service):
        """Sets the is_remote_service of this ControllerApiDescriptionModel.


        :param is_remote_service: The is_remote_service of this ControllerApiDescriptionModel.  # noqa: E501
        :type is_remote_service: bool
        """

        self._is_remote_service = is_remote_service

    @property
    def is_integration_service(self):
        """Gets the is_integration_service of this ControllerApiDescriptionModel.  # noqa: E501


        :return: The is_integration_service of this ControllerApiDescriptionModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_integration_service

    @is_integration_service.setter
    def is_integration_service(self, is_integration_service):
        """Sets the is_integration_service of this ControllerApiDescriptionModel.


        :param is_integration_service: The is_integration_service of this ControllerApiDescriptionModel.  # noqa: E501
        :type is_integration_service: bool
        """

        self._is_integration_service = is_integration_service

    @property
    def api_version(self):
        """Gets the api_version of this ControllerApiDescriptionModel.  # noqa: E501


        :return: The api_version of this ControllerApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ControllerApiDescriptionModel.


        :param api_version: The api_version of this ControllerApiDescriptionModel.  # noqa: E501
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def type(self):
        """Gets the type of this ControllerApiDescriptionModel.  # noqa: E501


        :return: The type of this ControllerApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ControllerApiDescriptionModel.


        :param type: The type of this ControllerApiDescriptionModel.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def interfaces(self):
        """Gets the interfaces of this ControllerApiDescriptionModel.  # noqa: E501


        :return: The interfaces of this ControllerApiDescriptionModel.  # noqa: E501
        :rtype: list[ControllerInterfaceApiDescriptionModel]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this ControllerApiDescriptionModel.


        :param interfaces: The interfaces of this ControllerApiDescriptionModel.  # noqa: E501
        :type interfaces: list[ControllerInterfaceApiDescriptionModel]
        """

        self._interfaces = interfaces

    @property
    def actions(self):
        """Gets the actions of this ControllerApiDescriptionModel.  # noqa: E501


        :return: The actions of this ControllerApiDescriptionModel.  # noqa: E501
        :rtype: dict[str, ActionApiDescriptionModel]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ControllerApiDescriptionModel.


        :param actions: The actions of this ControllerApiDescriptionModel.  # noqa: E501
        :type actions: dict[str, ActionApiDescriptionModel]
        """

        self._actions = actions

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControllerApiDescriptionModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ControllerApiDescriptionModel):
            return True

        return self.to_dict() != other.to_dict()
