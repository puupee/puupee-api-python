# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class UserStorageDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'size': 'int',
        'current_size': 'int',
        'total_count': 'int',
        'single_file_max_size': 'int',
        'items': 'list[UserStorageItemDto]'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'size': 'size',
        'current_size': 'currentSize',
        'total_count': 'totalCount',
        'single_file_max_size': 'singleFileMaxSize',
        'items': 'items'
    }

    def __init__(self, name=None, display_name=None, size=None, current_size=None, total_count=None, single_file_max_size=None, items=None, local_vars_configuration=None):  # noqa: E501
        """UserStorageDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._size = None
        self._current_size = None
        self._total_count = None
        self._single_file_max_size = None
        self._items = None
        self.discriminator = None

        self.name = name
        self.display_name = display_name
        if size is not None:
            self.size = size
        if current_size is not None:
            self.current_size = current_size
        if total_count is not None:
            self.total_count = total_count
        if single_file_max_size is not None:
            self.single_file_max_size = single_file_max_size
        self.items = items

    @property
    def name(self):
        """Gets the name of this UserStorageDto.  # noqa: E501


        :return: The name of this UserStorageDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserStorageDto.


        :param name: The name of this UserStorageDto.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this UserStorageDto.  # noqa: E501


        :return: The display_name of this UserStorageDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserStorageDto.


        :param display_name: The display_name of this UserStorageDto.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def size(self):
        """Gets the size of this UserStorageDto.  # noqa: E501


        :return: The size of this UserStorageDto.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UserStorageDto.


        :param size: The size of this UserStorageDto.  # noqa: E501
        :type size: int
        """

        self._size = size

    @property
    def current_size(self):
        """Gets the current_size of this UserStorageDto.  # noqa: E501


        :return: The current_size of this UserStorageDto.  # noqa: E501
        :rtype: int
        """
        return self._current_size

    @current_size.setter
    def current_size(self, current_size):
        """Sets the current_size of this UserStorageDto.


        :param current_size: The current_size of this UserStorageDto.  # noqa: E501
        :type current_size: int
        """

        self._current_size = current_size

    @property
    def total_count(self):
        """Gets the total_count of this UserStorageDto.  # noqa: E501


        :return: The total_count of this UserStorageDto.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this UserStorageDto.


        :param total_count: The total_count of this UserStorageDto.  # noqa: E501
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def single_file_max_size(self):
        """Gets the single_file_max_size of this UserStorageDto.  # noqa: E501


        :return: The single_file_max_size of this UserStorageDto.  # noqa: E501
        :rtype: int
        """
        return self._single_file_max_size

    @single_file_max_size.setter
    def single_file_max_size(self, single_file_max_size):
        """Sets the single_file_max_size of this UserStorageDto.


        :param single_file_max_size: The single_file_max_size of this UserStorageDto.  # noqa: E501
        :type single_file_max_size: int
        """

        self._single_file_max_size = single_file_max_size

    @property
    def items(self):
        """Gets the items of this UserStorageDto.  # noqa: E501


        :return: The items of this UserStorageDto.  # noqa: E501
        :rtype: list[UserStorageItemDto]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this UserStorageDto.


        :param items: The items of this UserStorageDto.  # noqa: E501
        :type items: list[UserStorageItemDto]
        """

        self._items = items

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserStorageDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserStorageDto):
            return True

        return self.to_dict() != other.to_dict()
