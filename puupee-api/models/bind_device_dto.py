# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class BindDeviceDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token': 'str',
        'tpns_token': 'str',
        'is_physical_device': 'bool',
        'name': 'str',
        'platform': 'str',
        'brand': 'str',
        'system_version': 'str'
    }

    attribute_map = {
        'token': 'token',
        'tpns_token': 'tpnsToken',
        'is_physical_device': 'isPhysicalDevice',
        'name': 'name',
        'platform': 'platform',
        'brand': 'brand',
        'system_version': 'systemVersion'
    }

    def __init__(self, token=None, tpns_token=None, is_physical_device=None, name=None, platform=None, brand=None, system_version=None, local_vars_configuration=None):  # noqa: E501
        """BindDeviceDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._token = None
        self._tpns_token = None
        self._is_physical_device = None
        self._name = None
        self._platform = None
        self._brand = None
        self._system_version = None
        self.discriminator = None

        self.token = token
        self.tpns_token = tpns_token
        if is_physical_device is not None:
            self.is_physical_device = is_physical_device
        self.name = name
        self.platform = platform
        self.brand = brand
        self.system_version = system_version

    @property
    def token(self):
        """Gets the token of this BindDeviceDto.  # noqa: E501


        :return: The token of this BindDeviceDto.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this BindDeviceDto.


        :param token: The token of this BindDeviceDto.  # noqa: E501
        :type token: str
        """

        self._token = token

    @property
    def tpns_token(self):
        """Gets the tpns_token of this BindDeviceDto.  # noqa: E501


        :return: The tpns_token of this BindDeviceDto.  # noqa: E501
        :rtype: str
        """
        return self._tpns_token

    @tpns_token.setter
    def tpns_token(self, tpns_token):
        """Sets the tpns_token of this BindDeviceDto.


        :param tpns_token: The tpns_token of this BindDeviceDto.  # noqa: E501
        :type tpns_token: str
        """

        self._tpns_token = tpns_token

    @property
    def is_physical_device(self):
        """Gets the is_physical_device of this BindDeviceDto.  # noqa: E501


        :return: The is_physical_device of this BindDeviceDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_physical_device

    @is_physical_device.setter
    def is_physical_device(self, is_physical_device):
        """Sets the is_physical_device of this BindDeviceDto.


        :param is_physical_device: The is_physical_device of this BindDeviceDto.  # noqa: E501
        :type is_physical_device: bool
        """

        self._is_physical_device = is_physical_device

    @property
    def name(self):
        """Gets the name of this BindDeviceDto.  # noqa: E501


        :return: The name of this BindDeviceDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BindDeviceDto.


        :param name: The name of this BindDeviceDto.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this BindDeviceDto.  # noqa: E501


        :return: The platform of this BindDeviceDto.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this BindDeviceDto.


        :param platform: The platform of this BindDeviceDto.  # noqa: E501
        :type platform: str
        """

        self._platform = platform

    @property
    def brand(self):
        """Gets the brand of this BindDeviceDto.  # noqa: E501


        :return: The brand of this BindDeviceDto.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this BindDeviceDto.


        :param brand: The brand of this BindDeviceDto.  # noqa: E501
        :type brand: str
        """

        self._brand = brand

    @property
    def system_version(self):
        """Gets the system_version of this BindDeviceDto.  # noqa: E501


        :return: The system_version of this BindDeviceDto.  # noqa: E501
        :rtype: str
        """
        return self._system_version

    @system_version.setter
    def system_version(self, system_version):
        """Sets the system_version of this BindDeviceDto.


        :param system_version: The system_version of this BindDeviceDto.  # noqa: E501
        :type system_version: str
        """

        self._system_version = system_version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BindDeviceDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BindDeviceDto):
            return True

        return self.to_dict() != other.to_dict()
