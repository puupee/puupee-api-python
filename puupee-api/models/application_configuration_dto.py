# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class ApplicationConfigurationDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'localization': 'ApplicationLocalizationConfigurationDto',
        'auth': 'ApplicationAuthConfigurationDto',
        'setting': 'ApplicationSettingConfigurationDto',
        'current_user': 'CurrentUserDto',
        'features': 'ApplicationFeatureConfigurationDto',
        'global_features': 'ApplicationGlobalFeatureConfigurationDto',
        'multi_tenancy': 'MultiTenancyInfoDto',
        'current_tenant': 'CurrentTenantDto',
        'timing': 'TimingDto',
        'clock': 'ClockDto',
        'object_extensions': 'ObjectExtensionsDto',
        'extra_properties': 'dict[str, object]'
    }

    attribute_map = {
        'localization': 'localization',
        'auth': 'auth',
        'setting': 'setting',
        'current_user': 'currentUser',
        'features': 'features',
        'global_features': 'globalFeatures',
        'multi_tenancy': 'multiTenancy',
        'current_tenant': 'currentTenant',
        'timing': 'timing',
        'clock': 'clock',
        'object_extensions': 'objectExtensions',
        'extra_properties': 'extraProperties'
    }

    def __init__(self, localization=None, auth=None, setting=None, current_user=None, features=None, global_features=None, multi_tenancy=None, current_tenant=None, timing=None, clock=None, object_extensions=None, extra_properties=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationConfigurationDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._localization = None
        self._auth = None
        self._setting = None
        self._current_user = None
        self._features = None
        self._global_features = None
        self._multi_tenancy = None
        self._current_tenant = None
        self._timing = None
        self._clock = None
        self._object_extensions = None
        self._extra_properties = None
        self.discriminator = None

        if localization is not None:
            self.localization = localization
        if auth is not None:
            self.auth = auth
        if setting is not None:
            self.setting = setting
        if current_user is not None:
            self.current_user = current_user
        if features is not None:
            self.features = features
        if global_features is not None:
            self.global_features = global_features
        if multi_tenancy is not None:
            self.multi_tenancy = multi_tenancy
        if current_tenant is not None:
            self.current_tenant = current_tenant
        if timing is not None:
            self.timing = timing
        if clock is not None:
            self.clock = clock
        if object_extensions is not None:
            self.object_extensions = object_extensions
        self.extra_properties = extra_properties

    @property
    def localization(self):
        """Gets the localization of this ApplicationConfigurationDto.  # noqa: E501


        :return: The localization of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: ApplicationLocalizationConfigurationDto
        """
        return self._localization

    @localization.setter
    def localization(self, localization):
        """Sets the localization of this ApplicationConfigurationDto.


        :param localization: The localization of this ApplicationConfigurationDto.  # noqa: E501
        :type localization: ApplicationLocalizationConfigurationDto
        """

        self._localization = localization

    @property
    def auth(self):
        """Gets the auth of this ApplicationConfigurationDto.  # noqa: E501


        :return: The auth of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: ApplicationAuthConfigurationDto
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this ApplicationConfigurationDto.


        :param auth: The auth of this ApplicationConfigurationDto.  # noqa: E501
        :type auth: ApplicationAuthConfigurationDto
        """

        self._auth = auth

    @property
    def setting(self):
        """Gets the setting of this ApplicationConfigurationDto.  # noqa: E501


        :return: The setting of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: ApplicationSettingConfigurationDto
        """
        return self._setting

    @setting.setter
    def setting(self, setting):
        """Sets the setting of this ApplicationConfigurationDto.


        :param setting: The setting of this ApplicationConfigurationDto.  # noqa: E501
        :type setting: ApplicationSettingConfigurationDto
        """

        self._setting = setting

    @property
    def current_user(self):
        """Gets the current_user of this ApplicationConfigurationDto.  # noqa: E501


        :return: The current_user of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: CurrentUserDto
        """
        return self._current_user

    @current_user.setter
    def current_user(self, current_user):
        """Sets the current_user of this ApplicationConfigurationDto.


        :param current_user: The current_user of this ApplicationConfigurationDto.  # noqa: E501
        :type current_user: CurrentUserDto
        """

        self._current_user = current_user

    @property
    def features(self):
        """Gets the features of this ApplicationConfigurationDto.  # noqa: E501


        :return: The features of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: ApplicationFeatureConfigurationDto
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ApplicationConfigurationDto.


        :param features: The features of this ApplicationConfigurationDto.  # noqa: E501
        :type features: ApplicationFeatureConfigurationDto
        """

        self._features = features

    @property
    def global_features(self):
        """Gets the global_features of this ApplicationConfigurationDto.  # noqa: E501


        :return: The global_features of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: ApplicationGlobalFeatureConfigurationDto
        """
        return self._global_features

    @global_features.setter
    def global_features(self, global_features):
        """Sets the global_features of this ApplicationConfigurationDto.


        :param global_features: The global_features of this ApplicationConfigurationDto.  # noqa: E501
        :type global_features: ApplicationGlobalFeatureConfigurationDto
        """

        self._global_features = global_features

    @property
    def multi_tenancy(self):
        """Gets the multi_tenancy of this ApplicationConfigurationDto.  # noqa: E501


        :return: The multi_tenancy of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: MultiTenancyInfoDto
        """
        return self._multi_tenancy

    @multi_tenancy.setter
    def multi_tenancy(self, multi_tenancy):
        """Sets the multi_tenancy of this ApplicationConfigurationDto.


        :param multi_tenancy: The multi_tenancy of this ApplicationConfigurationDto.  # noqa: E501
        :type multi_tenancy: MultiTenancyInfoDto
        """

        self._multi_tenancy = multi_tenancy

    @property
    def current_tenant(self):
        """Gets the current_tenant of this ApplicationConfigurationDto.  # noqa: E501


        :return: The current_tenant of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: CurrentTenantDto
        """
        return self._current_tenant

    @current_tenant.setter
    def current_tenant(self, current_tenant):
        """Sets the current_tenant of this ApplicationConfigurationDto.


        :param current_tenant: The current_tenant of this ApplicationConfigurationDto.  # noqa: E501
        :type current_tenant: CurrentTenantDto
        """

        self._current_tenant = current_tenant

    @property
    def timing(self):
        """Gets the timing of this ApplicationConfigurationDto.  # noqa: E501


        :return: The timing of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: TimingDto
        """
        return self._timing

    @timing.setter
    def timing(self, timing):
        """Sets the timing of this ApplicationConfigurationDto.


        :param timing: The timing of this ApplicationConfigurationDto.  # noqa: E501
        :type timing: TimingDto
        """

        self._timing = timing

    @property
    def clock(self):
        """Gets the clock of this ApplicationConfigurationDto.  # noqa: E501


        :return: The clock of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: ClockDto
        """
        return self._clock

    @clock.setter
    def clock(self, clock):
        """Sets the clock of this ApplicationConfigurationDto.


        :param clock: The clock of this ApplicationConfigurationDto.  # noqa: E501
        :type clock: ClockDto
        """

        self._clock = clock

    @property
    def object_extensions(self):
        """Gets the object_extensions of this ApplicationConfigurationDto.  # noqa: E501


        :return: The object_extensions of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: ObjectExtensionsDto
        """
        return self._object_extensions

    @object_extensions.setter
    def object_extensions(self, object_extensions):
        """Sets the object_extensions of this ApplicationConfigurationDto.


        :param object_extensions: The object_extensions of this ApplicationConfigurationDto.  # noqa: E501
        :type object_extensions: ObjectExtensionsDto
        """

        self._object_extensions = object_extensions

    @property
    def extra_properties(self):
        """Gets the extra_properties of this ApplicationConfigurationDto.  # noqa: E501


        :return: The extra_properties of this ApplicationConfigurationDto.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._extra_properties

    @extra_properties.setter
    def extra_properties(self, extra_properties):
        """Sets the extra_properties of this ApplicationConfigurationDto.


        :param extra_properties: The extra_properties of this ApplicationConfigurationDto.  # noqa: E501
        :type extra_properties: dict[str, object]
        """

        self._extra_properties = extra_properties

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationConfigurationDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationConfigurationDto):
            return True

        return self.to_dict() != other.to_dict()
