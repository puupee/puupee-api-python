# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class ExtensionPropertyUiLookupDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'result_list_property_name': 'str',
        'display_property_name': 'str',
        'value_property_name': 'str',
        'filter_param_name': 'str'
    }

    attribute_map = {
        'url': 'url',
        'result_list_property_name': 'resultListPropertyName',
        'display_property_name': 'displayPropertyName',
        'value_property_name': 'valuePropertyName',
        'filter_param_name': 'filterParamName'
    }

    def __init__(self, url=None, result_list_property_name=None, display_property_name=None, value_property_name=None, filter_param_name=None, local_vars_configuration=None):  # noqa: E501
        """ExtensionPropertyUiLookupDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._url = None
        self._result_list_property_name = None
        self._display_property_name = None
        self._value_property_name = None
        self._filter_param_name = None
        self.discriminator = None

        self.url = url
        self.result_list_property_name = result_list_property_name
        self.display_property_name = display_property_name
        self.value_property_name = value_property_name
        self.filter_param_name = filter_param_name

    @property
    def url(self):
        """Gets the url of this ExtensionPropertyUiLookupDto.  # noqa: E501


        :return: The url of this ExtensionPropertyUiLookupDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ExtensionPropertyUiLookupDto.


        :param url: The url of this ExtensionPropertyUiLookupDto.  # noqa: E501
        :type url: str
        """

        self._url = url

    @property
    def result_list_property_name(self):
        """Gets the result_list_property_name of this ExtensionPropertyUiLookupDto.  # noqa: E501


        :return: The result_list_property_name of this ExtensionPropertyUiLookupDto.  # noqa: E501
        :rtype: str
        """
        return self._result_list_property_name

    @result_list_property_name.setter
    def result_list_property_name(self, result_list_property_name):
        """Sets the result_list_property_name of this ExtensionPropertyUiLookupDto.


        :param result_list_property_name: The result_list_property_name of this ExtensionPropertyUiLookupDto.  # noqa: E501
        :type result_list_property_name: str
        """

        self._result_list_property_name = result_list_property_name

    @property
    def display_property_name(self):
        """Gets the display_property_name of this ExtensionPropertyUiLookupDto.  # noqa: E501


        :return: The display_property_name of this ExtensionPropertyUiLookupDto.  # noqa: E501
        :rtype: str
        """
        return self._display_property_name

    @display_property_name.setter
    def display_property_name(self, display_property_name):
        """Sets the display_property_name of this ExtensionPropertyUiLookupDto.


        :param display_property_name: The display_property_name of this ExtensionPropertyUiLookupDto.  # noqa: E501
        :type display_property_name: str
        """

        self._display_property_name = display_property_name

    @property
    def value_property_name(self):
        """Gets the value_property_name of this ExtensionPropertyUiLookupDto.  # noqa: E501


        :return: The value_property_name of this ExtensionPropertyUiLookupDto.  # noqa: E501
        :rtype: str
        """
        return self._value_property_name

    @value_property_name.setter
    def value_property_name(self, value_property_name):
        """Sets the value_property_name of this ExtensionPropertyUiLookupDto.


        :param value_property_name: The value_property_name of this ExtensionPropertyUiLookupDto.  # noqa: E501
        :type value_property_name: str
        """

        self._value_property_name = value_property_name

    @property
    def filter_param_name(self):
        """Gets the filter_param_name of this ExtensionPropertyUiLookupDto.  # noqa: E501


        :return: The filter_param_name of this ExtensionPropertyUiLookupDto.  # noqa: E501
        :rtype: str
        """
        return self._filter_param_name

    @filter_param_name.setter
    def filter_param_name(self, filter_param_name):
        """Sets the filter_param_name of this ExtensionPropertyUiLookupDto.


        :param filter_param_name: The filter_param_name of this ExtensionPropertyUiLookupDto.  # noqa: E501
        :type filter_param_name: str
        """

        self._filter_param_name = filter_param_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtensionPropertyUiLookupDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExtensionPropertyUiLookupDto):
            return True

        return self.to_dict() != other.to_dict()
