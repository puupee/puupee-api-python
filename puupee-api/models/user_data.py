# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class UserData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'tenant_id': 'str',
        'user_name': 'str',
        'name': 'str',
        'surname': 'str',
        'is_active': 'bool',
        'email': 'str',
        'email_confirmed': 'bool',
        'phone_number': 'str',
        'phone_number_confirmed': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'tenant_id': 'tenantId',
        'user_name': 'userName',
        'name': 'name',
        'surname': 'surname',
        'is_active': 'isActive',
        'email': 'email',
        'email_confirmed': 'emailConfirmed',
        'phone_number': 'phoneNumber',
        'phone_number_confirmed': 'phoneNumberConfirmed'
    }

    def __init__(self, id=None, tenant_id=None, user_name=None, name=None, surname=None, is_active=None, email=None, email_confirmed=None, phone_number=None, phone_number_confirmed=None, local_vars_configuration=None):  # noqa: E501
        """UserData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tenant_id = None
        self._user_name = None
        self._name = None
        self._surname = None
        self._is_active = None
        self._email = None
        self._email_confirmed = None
        self._phone_number = None
        self._phone_number_confirmed = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.tenant_id = tenant_id
        self.user_name = user_name
        self.name = name
        self.surname = surname
        if is_active is not None:
            self.is_active = is_active
        self.email = email
        if email_confirmed is not None:
            self.email_confirmed = email_confirmed
        self.phone_number = phone_number
        if phone_number_confirmed is not None:
            self.phone_number_confirmed = phone_number_confirmed

    @property
    def id(self):
        """Gets the id of this UserData.  # noqa: E501


        :return: The id of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserData.


        :param id: The id of this UserData.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this UserData.  # noqa: E501


        :return: The tenant_id of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this UserData.


        :param tenant_id: The tenant_id of this UserData.  # noqa: E501
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def user_name(self):
        """Gets the user_name of this UserData.  # noqa: E501


        :return: The user_name of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserData.


        :param user_name: The user_name of this UserData.  # noqa: E501
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def name(self):
        """Gets the name of this UserData.  # noqa: E501


        :return: The name of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserData.


        :param name: The name of this UserData.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def surname(self):
        """Gets the surname of this UserData.  # noqa: E501


        :return: The surname of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this UserData.


        :param surname: The surname of this UserData.  # noqa: E501
        :type surname: str
        """

        self._surname = surname

    @property
    def is_active(self):
        """Gets the is_active of this UserData.  # noqa: E501


        :return: The is_active of this UserData.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserData.


        :param is_active: The is_active of this UserData.  # noqa: E501
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def email(self):
        """Gets the email of this UserData.  # noqa: E501


        :return: The email of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserData.


        :param email: The email of this UserData.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def email_confirmed(self):
        """Gets the email_confirmed of this UserData.  # noqa: E501


        :return: The email_confirmed of this UserData.  # noqa: E501
        :rtype: bool
        """
        return self._email_confirmed

    @email_confirmed.setter
    def email_confirmed(self, email_confirmed):
        """Sets the email_confirmed of this UserData.


        :param email_confirmed: The email_confirmed of this UserData.  # noqa: E501
        :type email_confirmed: bool
        """

        self._email_confirmed = email_confirmed

    @property
    def phone_number(self):
        """Gets the phone_number of this UserData.  # noqa: E501


        :return: The phone_number of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserData.


        :param phone_number: The phone_number of this UserData.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_confirmed(self):
        """Gets the phone_number_confirmed of this UserData.  # noqa: E501


        :return: The phone_number_confirmed of this UserData.  # noqa: E501
        :rtype: bool
        """
        return self._phone_number_confirmed

    @phone_number_confirmed.setter
    def phone_number_confirmed(self, phone_number_confirmed):
        """Sets the phone_number_confirmed of this UserData.


        :param phone_number_confirmed: The phone_number_confirmed of this UserData.  # noqa: E501
        :type phone_number_confirmed: bool
        """

        self._phone_number_confirmed = phone_number_confirmed

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserData):
            return True

        return self.to_dict() != other.to_dict()
