# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class PropertyApiDescriptionModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'json_name': 'str',
        'type': 'str',
        'type_simple': 'str',
        'is_required': 'bool',
        'min_length': 'int',
        'max_length': 'int',
        'minimum': 'str',
        'maximum': 'str',
        'regex': 'str'
    }

    attribute_map = {
        'name': 'name',
        'json_name': 'jsonName',
        'type': 'type',
        'type_simple': 'typeSimple',
        'is_required': 'isRequired',
        'min_length': 'minLength',
        'max_length': 'maxLength',
        'minimum': 'minimum',
        'maximum': 'maximum',
        'regex': 'regex'
    }

    def __init__(self, name=None, json_name=None, type=None, type_simple=None, is_required=None, min_length=None, max_length=None, minimum=None, maximum=None, regex=None, local_vars_configuration=None):  # noqa: E501
        """PropertyApiDescriptionModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._json_name = None
        self._type = None
        self._type_simple = None
        self._is_required = None
        self._min_length = None
        self._max_length = None
        self._minimum = None
        self._maximum = None
        self._regex = None
        self.discriminator = None

        self.name = name
        self.json_name = json_name
        self.type = type
        self.type_simple = type_simple
        if is_required is not None:
            self.is_required = is_required
        self.min_length = min_length
        self.max_length = max_length
        self.minimum = minimum
        self.maximum = maximum
        self.regex = regex

    @property
    def name(self):
        """Gets the name of this PropertyApiDescriptionModel.  # noqa: E501


        :return: The name of this PropertyApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PropertyApiDescriptionModel.


        :param name: The name of this PropertyApiDescriptionModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def json_name(self):
        """Gets the json_name of this PropertyApiDescriptionModel.  # noqa: E501


        :return: The json_name of this PropertyApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._json_name

    @json_name.setter
    def json_name(self, json_name):
        """Sets the json_name of this PropertyApiDescriptionModel.


        :param json_name: The json_name of this PropertyApiDescriptionModel.  # noqa: E501
        :type json_name: str
        """

        self._json_name = json_name

    @property
    def type(self):
        """Gets the type of this PropertyApiDescriptionModel.  # noqa: E501


        :return: The type of this PropertyApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PropertyApiDescriptionModel.


        :param type: The type of this PropertyApiDescriptionModel.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def type_simple(self):
        """Gets the type_simple of this PropertyApiDescriptionModel.  # noqa: E501


        :return: The type_simple of this PropertyApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._type_simple

    @type_simple.setter
    def type_simple(self, type_simple):
        """Sets the type_simple of this PropertyApiDescriptionModel.


        :param type_simple: The type_simple of this PropertyApiDescriptionModel.  # noqa: E501
        :type type_simple: str
        """

        self._type_simple = type_simple

    @property
    def is_required(self):
        """Gets the is_required of this PropertyApiDescriptionModel.  # noqa: E501


        :return: The is_required of this PropertyApiDescriptionModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this PropertyApiDescriptionModel.


        :param is_required: The is_required of this PropertyApiDescriptionModel.  # noqa: E501
        :type is_required: bool
        """

        self._is_required = is_required

    @property
    def min_length(self):
        """Gets the min_length of this PropertyApiDescriptionModel.  # noqa: E501


        :return: The min_length of this PropertyApiDescriptionModel.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this PropertyApiDescriptionModel.


        :param min_length: The min_length of this PropertyApiDescriptionModel.  # noqa: E501
        :type min_length: int
        """

        self._min_length = min_length

    @property
    def max_length(self):
        """Gets the max_length of this PropertyApiDescriptionModel.  # noqa: E501


        :return: The max_length of this PropertyApiDescriptionModel.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this PropertyApiDescriptionModel.


        :param max_length: The max_length of this PropertyApiDescriptionModel.  # noqa: E501
        :type max_length: int
        """

        self._max_length = max_length

    @property
    def minimum(self):
        """Gets the minimum of this PropertyApiDescriptionModel.  # noqa: E501


        :return: The minimum of this PropertyApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this PropertyApiDescriptionModel.


        :param minimum: The minimum of this PropertyApiDescriptionModel.  # noqa: E501
        :type minimum: str
        """

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this PropertyApiDescriptionModel.  # noqa: E501


        :return: The maximum of this PropertyApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this PropertyApiDescriptionModel.


        :param maximum: The maximum of this PropertyApiDescriptionModel.  # noqa: E501
        :type maximum: str
        """

        self._maximum = maximum

    @property
    def regex(self):
        """Gets the regex of this PropertyApiDescriptionModel.  # noqa: E501


        :return: The regex of this PropertyApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this PropertyApiDescriptionModel.


        :param regex: The regex of this PropertyApiDescriptionModel.  # noqa: E501
        :type regex: str
        """

        self._regex = regex

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyApiDescriptionModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PropertyApiDescriptionModel):
            return True

        return self.to_dict() != other.to_dict()
