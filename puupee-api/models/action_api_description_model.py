# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class ActionApiDescriptionModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'unique_name': 'str',
        'name': 'str',
        'http_method': 'str',
        'url': 'str',
        'supported_versions': 'list[str]',
        'parameters_on_method': 'list[MethodParameterApiDescriptionModel]',
        'parameters': 'list[ParameterApiDescriptionModel]',
        'return_value': 'ReturnValueApiDescriptionModel',
        'allow_anonymous': 'bool',
        'implement_from': 'str'
    }

    attribute_map = {
        'unique_name': 'uniqueName',
        'name': 'name',
        'http_method': 'httpMethod',
        'url': 'url',
        'supported_versions': 'supportedVersions',
        'parameters_on_method': 'parametersOnMethod',
        'parameters': 'parameters',
        'return_value': 'returnValue',
        'allow_anonymous': 'allowAnonymous',
        'implement_from': 'implementFrom'
    }

    def __init__(self, unique_name=None, name=None, http_method=None, url=None, supported_versions=None, parameters_on_method=None, parameters=None, return_value=None, allow_anonymous=None, implement_from=None, local_vars_configuration=None):  # noqa: E501
        """ActionApiDescriptionModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._unique_name = None
        self._name = None
        self._http_method = None
        self._url = None
        self._supported_versions = None
        self._parameters_on_method = None
        self._parameters = None
        self._return_value = None
        self._allow_anonymous = None
        self._implement_from = None
        self.discriminator = None

        self.unique_name = unique_name
        self.name = name
        self.http_method = http_method
        self.url = url
        self.supported_versions = supported_versions
        self.parameters_on_method = parameters_on_method
        self.parameters = parameters
        if return_value is not None:
            self.return_value = return_value
        self.allow_anonymous = allow_anonymous
        self.implement_from = implement_from

    @property
    def unique_name(self):
        """Gets the unique_name of this ActionApiDescriptionModel.  # noqa: E501


        :return: The unique_name of this ActionApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this ActionApiDescriptionModel.


        :param unique_name: The unique_name of this ActionApiDescriptionModel.  # noqa: E501
        :type unique_name: str
        """

        self._unique_name = unique_name

    @property
    def name(self):
        """Gets the name of this ActionApiDescriptionModel.  # noqa: E501


        :return: The name of this ActionApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionApiDescriptionModel.


        :param name: The name of this ActionApiDescriptionModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def http_method(self):
        """Gets the http_method of this ActionApiDescriptionModel.  # noqa: E501


        :return: The http_method of this ActionApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this ActionApiDescriptionModel.


        :param http_method: The http_method of this ActionApiDescriptionModel.  # noqa: E501
        :type http_method: str
        """

        self._http_method = http_method

    @property
    def url(self):
        """Gets the url of this ActionApiDescriptionModel.  # noqa: E501


        :return: The url of this ActionApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ActionApiDescriptionModel.


        :param url: The url of this ActionApiDescriptionModel.  # noqa: E501
        :type url: str
        """

        self._url = url

    @property
    def supported_versions(self):
        """Gets the supported_versions of this ActionApiDescriptionModel.  # noqa: E501


        :return: The supported_versions of this ActionApiDescriptionModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_versions

    @supported_versions.setter
    def supported_versions(self, supported_versions):
        """Sets the supported_versions of this ActionApiDescriptionModel.


        :param supported_versions: The supported_versions of this ActionApiDescriptionModel.  # noqa: E501
        :type supported_versions: list[str]
        """

        self._supported_versions = supported_versions

    @property
    def parameters_on_method(self):
        """Gets the parameters_on_method of this ActionApiDescriptionModel.  # noqa: E501


        :return: The parameters_on_method of this ActionApiDescriptionModel.  # noqa: E501
        :rtype: list[MethodParameterApiDescriptionModel]
        """
        return self._parameters_on_method

    @parameters_on_method.setter
    def parameters_on_method(self, parameters_on_method):
        """Sets the parameters_on_method of this ActionApiDescriptionModel.


        :param parameters_on_method: The parameters_on_method of this ActionApiDescriptionModel.  # noqa: E501
        :type parameters_on_method: list[MethodParameterApiDescriptionModel]
        """

        self._parameters_on_method = parameters_on_method

    @property
    def parameters(self):
        """Gets the parameters of this ActionApiDescriptionModel.  # noqa: E501


        :return: The parameters of this ActionApiDescriptionModel.  # noqa: E501
        :rtype: list[ParameterApiDescriptionModel]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ActionApiDescriptionModel.


        :param parameters: The parameters of this ActionApiDescriptionModel.  # noqa: E501
        :type parameters: list[ParameterApiDescriptionModel]
        """

        self._parameters = parameters

    @property
    def return_value(self):
        """Gets the return_value of this ActionApiDescriptionModel.  # noqa: E501


        :return: The return_value of this ActionApiDescriptionModel.  # noqa: E501
        :rtype: ReturnValueApiDescriptionModel
        """
        return self._return_value

    @return_value.setter
    def return_value(self, return_value):
        """Sets the return_value of this ActionApiDescriptionModel.


        :param return_value: The return_value of this ActionApiDescriptionModel.  # noqa: E501
        :type return_value: ReturnValueApiDescriptionModel
        """

        self._return_value = return_value

    @property
    def allow_anonymous(self):
        """Gets the allow_anonymous of this ActionApiDescriptionModel.  # noqa: E501


        :return: The allow_anonymous of this ActionApiDescriptionModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_anonymous

    @allow_anonymous.setter
    def allow_anonymous(self, allow_anonymous):
        """Sets the allow_anonymous of this ActionApiDescriptionModel.


        :param allow_anonymous: The allow_anonymous of this ActionApiDescriptionModel.  # noqa: E501
        :type allow_anonymous: bool
        """

        self._allow_anonymous = allow_anonymous

    @property
    def implement_from(self):
        """Gets the implement_from of this ActionApiDescriptionModel.  # noqa: E501


        :return: The implement_from of this ActionApiDescriptionModel.  # noqa: E501
        :rtype: str
        """
        return self._implement_from

    @implement_from.setter
    def implement_from(self, implement_from):
        """Sets the implement_from of this ActionApiDescriptionModel.


        :param implement_from: The implement_from of this ActionApiDescriptionModel.  # noqa: E501
        :type implement_from: str
        """

        self._implement_from = implement_from

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionApiDescriptionModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActionApiDescriptionModel):
            return True

        return self.to_dict() != other.to_dict()
