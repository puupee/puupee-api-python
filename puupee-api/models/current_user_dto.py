# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class CurrentUserDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_authenticated': 'bool',
        'id': 'str',
        'tenant_id': 'str',
        'impersonator_user_id': 'str',
        'impersonator_tenant_id': 'str',
        'impersonator_user_name': 'str',
        'impersonator_tenant_name': 'str',
        'user_name': 'str',
        'name': 'str',
        'sur_name': 'str',
        'email': 'str',
        'email_verified': 'bool',
        'phone_number': 'str',
        'phone_number_verified': 'bool',
        'roles': 'list[str]'
    }

    attribute_map = {
        'is_authenticated': 'isAuthenticated',
        'id': 'id',
        'tenant_id': 'tenantId',
        'impersonator_user_id': 'impersonatorUserId',
        'impersonator_tenant_id': 'impersonatorTenantId',
        'impersonator_user_name': 'impersonatorUserName',
        'impersonator_tenant_name': 'impersonatorTenantName',
        'user_name': 'userName',
        'name': 'name',
        'sur_name': 'surName',
        'email': 'email',
        'email_verified': 'emailVerified',
        'phone_number': 'phoneNumber',
        'phone_number_verified': 'phoneNumberVerified',
        'roles': 'roles'
    }

    def __init__(self, is_authenticated=None, id=None, tenant_id=None, impersonator_user_id=None, impersonator_tenant_id=None, impersonator_user_name=None, impersonator_tenant_name=None, user_name=None, name=None, sur_name=None, email=None, email_verified=None, phone_number=None, phone_number_verified=None, roles=None, local_vars_configuration=None):  # noqa: E501
        """CurrentUserDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._is_authenticated = None
        self._id = None
        self._tenant_id = None
        self._impersonator_user_id = None
        self._impersonator_tenant_id = None
        self._impersonator_user_name = None
        self._impersonator_tenant_name = None
        self._user_name = None
        self._name = None
        self._sur_name = None
        self._email = None
        self._email_verified = None
        self._phone_number = None
        self._phone_number_verified = None
        self._roles = None
        self.discriminator = None

        if is_authenticated is not None:
            self.is_authenticated = is_authenticated
        self.id = id
        self.tenant_id = tenant_id
        self.impersonator_user_id = impersonator_user_id
        self.impersonator_tenant_id = impersonator_tenant_id
        self.impersonator_user_name = impersonator_user_name
        self.impersonator_tenant_name = impersonator_tenant_name
        self.user_name = user_name
        self.name = name
        self.sur_name = sur_name
        self.email = email
        if email_verified is not None:
            self.email_verified = email_verified
        self.phone_number = phone_number
        if phone_number_verified is not None:
            self.phone_number_verified = phone_number_verified
        self.roles = roles

    @property
    def is_authenticated(self):
        """Gets the is_authenticated of this CurrentUserDto.  # noqa: E501


        :return: The is_authenticated of this CurrentUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_authenticated

    @is_authenticated.setter
    def is_authenticated(self, is_authenticated):
        """Sets the is_authenticated of this CurrentUserDto.


        :param is_authenticated: The is_authenticated of this CurrentUserDto.  # noqa: E501
        :type is_authenticated: bool
        """

        self._is_authenticated = is_authenticated

    @property
    def id(self):
        """Gets the id of this CurrentUserDto.  # noqa: E501


        :return: The id of this CurrentUserDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurrentUserDto.


        :param id: The id of this CurrentUserDto.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this CurrentUserDto.  # noqa: E501


        :return: The tenant_id of this CurrentUserDto.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CurrentUserDto.


        :param tenant_id: The tenant_id of this CurrentUserDto.  # noqa: E501
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def impersonator_user_id(self):
        """Gets the impersonator_user_id of this CurrentUserDto.  # noqa: E501


        :return: The impersonator_user_id of this CurrentUserDto.  # noqa: E501
        :rtype: str
        """
        return self._impersonator_user_id

    @impersonator_user_id.setter
    def impersonator_user_id(self, impersonator_user_id):
        """Sets the impersonator_user_id of this CurrentUserDto.


        :param impersonator_user_id: The impersonator_user_id of this CurrentUserDto.  # noqa: E501
        :type impersonator_user_id: str
        """

        self._impersonator_user_id = impersonator_user_id

    @property
    def impersonator_tenant_id(self):
        """Gets the impersonator_tenant_id of this CurrentUserDto.  # noqa: E501


        :return: The impersonator_tenant_id of this CurrentUserDto.  # noqa: E501
        :rtype: str
        """
        return self._impersonator_tenant_id

    @impersonator_tenant_id.setter
    def impersonator_tenant_id(self, impersonator_tenant_id):
        """Sets the impersonator_tenant_id of this CurrentUserDto.


        :param impersonator_tenant_id: The impersonator_tenant_id of this CurrentUserDto.  # noqa: E501
        :type impersonator_tenant_id: str
        """

        self._impersonator_tenant_id = impersonator_tenant_id

    @property
    def impersonator_user_name(self):
        """Gets the impersonator_user_name of this CurrentUserDto.  # noqa: E501


        :return: The impersonator_user_name of this CurrentUserDto.  # noqa: E501
        :rtype: str
        """
        return self._impersonator_user_name

    @impersonator_user_name.setter
    def impersonator_user_name(self, impersonator_user_name):
        """Sets the impersonator_user_name of this CurrentUserDto.


        :param impersonator_user_name: The impersonator_user_name of this CurrentUserDto.  # noqa: E501
        :type impersonator_user_name: str
        """

        self._impersonator_user_name = impersonator_user_name

    @property
    def impersonator_tenant_name(self):
        """Gets the impersonator_tenant_name of this CurrentUserDto.  # noqa: E501


        :return: The impersonator_tenant_name of this CurrentUserDto.  # noqa: E501
        :rtype: str
        """
        return self._impersonator_tenant_name

    @impersonator_tenant_name.setter
    def impersonator_tenant_name(self, impersonator_tenant_name):
        """Sets the impersonator_tenant_name of this CurrentUserDto.


        :param impersonator_tenant_name: The impersonator_tenant_name of this CurrentUserDto.  # noqa: E501
        :type impersonator_tenant_name: str
        """

        self._impersonator_tenant_name = impersonator_tenant_name

    @property
    def user_name(self):
        """Gets the user_name of this CurrentUserDto.  # noqa: E501


        :return: The user_name of this CurrentUserDto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this CurrentUserDto.


        :param user_name: The user_name of this CurrentUserDto.  # noqa: E501
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def name(self):
        """Gets the name of this CurrentUserDto.  # noqa: E501


        :return: The name of this CurrentUserDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CurrentUserDto.


        :param name: The name of this CurrentUserDto.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def sur_name(self):
        """Gets the sur_name of this CurrentUserDto.  # noqa: E501


        :return: The sur_name of this CurrentUserDto.  # noqa: E501
        :rtype: str
        """
        return self._sur_name

    @sur_name.setter
    def sur_name(self, sur_name):
        """Sets the sur_name of this CurrentUserDto.


        :param sur_name: The sur_name of this CurrentUserDto.  # noqa: E501
        :type sur_name: str
        """

        self._sur_name = sur_name

    @property
    def email(self):
        """Gets the email of this CurrentUserDto.  # noqa: E501


        :return: The email of this CurrentUserDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CurrentUserDto.


        :param email: The email of this CurrentUserDto.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this CurrentUserDto.  # noqa: E501


        :return: The email_verified of this CurrentUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this CurrentUserDto.


        :param email_verified: The email_verified of this CurrentUserDto.  # noqa: E501
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def phone_number(self):
        """Gets the phone_number of this CurrentUserDto.  # noqa: E501


        :return: The phone_number of this CurrentUserDto.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CurrentUserDto.


        :param phone_number: The phone_number of this CurrentUserDto.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_verified(self):
        """Gets the phone_number_verified of this CurrentUserDto.  # noqa: E501


        :return: The phone_number_verified of this CurrentUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._phone_number_verified

    @phone_number_verified.setter
    def phone_number_verified(self, phone_number_verified):
        """Sets the phone_number_verified of this CurrentUserDto.


        :param phone_number_verified: The phone_number_verified of this CurrentUserDto.  # noqa: E501
        :type phone_number_verified: bool
        """

        self._phone_number_verified = phone_number_verified

    @property
    def roles(self):
        """Gets the roles of this CurrentUserDto.  # noqa: E501


        :return: The roles of this CurrentUserDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this CurrentUserDto.


        :param roles: The roles of this CurrentUserDto.  # noqa: E501
        :type roles: list[str]
        """

        self._roles = roles

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentUserDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CurrentUserDto):
            return True

        return self.to_dict() != other.to_dict()
