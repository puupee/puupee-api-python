# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class CreateOpenIddictApplicationDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'display_name': 'str',
        'display_names': 'str',
        'permissions': 'list[str]',
        'post_logout_redirect_uris': 'str',
        'properties': 'str',
        'redirect_uris': 'str',
        'requirements': 'str',
        'client_uri': 'str',
        'logo_uri': 'str',
        'grant_types': 'list[str]',
        'scopes': 'list[str]'
    }

    attribute_map = {
        'type': 'type',
        'display_name': 'displayName',
        'display_names': 'displayNames',
        'permissions': 'permissions',
        'post_logout_redirect_uris': 'postLogoutRedirectUris',
        'properties': 'properties',
        'redirect_uris': 'redirectUris',
        'requirements': 'requirements',
        'client_uri': 'clientUri',
        'logo_uri': 'logoUri',
        'grant_types': 'grantTypes',
        'scopes': 'scopes'
    }

    def __init__(self, type=None, display_name=None, display_names=None, permissions=None, post_logout_redirect_uris=None, properties=None, redirect_uris=None, requirements=None, client_uri=None, logo_uri=None, grant_types=None, scopes=None, local_vars_configuration=None):  # noqa: E501
        """CreateOpenIddictApplicationDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._display_name = None
        self._display_names = None
        self._permissions = None
        self._post_logout_redirect_uris = None
        self._properties = None
        self._redirect_uris = None
        self._requirements = None
        self._client_uri = None
        self._logo_uri = None
        self._grant_types = None
        self._scopes = None
        self.discriminator = None

        self.type = type
        self.display_name = display_name
        self.display_names = display_names
        self.permissions = permissions
        self.post_logout_redirect_uris = post_logout_redirect_uris
        self.properties = properties
        self.redirect_uris = redirect_uris
        self.requirements = requirements
        self.client_uri = client_uri
        self.logo_uri = logo_uri
        self.grant_types = grant_types
        self.scopes = scopes

    @property
    def type(self):
        """Gets the type of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The type of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateOpenIddictApplicationDto.


        :param type: The type of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def display_name(self):
        """Gets the display_name of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The display_name of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateOpenIddictApplicationDto.


        :param display_name: The display_name of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def display_names(self):
        """Gets the display_names of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The display_names of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._display_names

    @display_names.setter
    def display_names(self, display_names):
        """Sets the display_names of this CreateOpenIddictApplicationDto.


        :param display_names: The display_names of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type display_names: str
        """

        self._display_names = display_names

    @property
    def permissions(self):
        """Gets the permissions of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The permissions of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this CreateOpenIddictApplicationDto.


        :param permissions: The permissions of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type permissions: list[str]
        """

        self._permissions = permissions

    @property
    def post_logout_redirect_uris(self):
        """Gets the post_logout_redirect_uris of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The post_logout_redirect_uris of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._post_logout_redirect_uris

    @post_logout_redirect_uris.setter
    def post_logout_redirect_uris(self, post_logout_redirect_uris):
        """Sets the post_logout_redirect_uris of this CreateOpenIddictApplicationDto.


        :param post_logout_redirect_uris: The post_logout_redirect_uris of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type post_logout_redirect_uris: str
        """

        self._post_logout_redirect_uris = post_logout_redirect_uris

    @property
    def properties(self):
        """Gets the properties of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The properties of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CreateOpenIddictApplicationDto.


        :param properties: The properties of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type properties: str
        """

        self._properties = properties

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The redirect_uris of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this CreateOpenIddictApplicationDto.


        :param redirect_uris: The redirect_uris of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type redirect_uris: str
        """

        self._redirect_uris = redirect_uris

    @property
    def requirements(self):
        """Gets the requirements of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The requirements of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this CreateOpenIddictApplicationDto.


        :param requirements: The requirements of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type requirements: str
        """

        self._requirements = requirements

    @property
    def client_uri(self):
        """Gets the client_uri of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The client_uri of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._client_uri

    @client_uri.setter
    def client_uri(self, client_uri):
        """Sets the client_uri of this CreateOpenIddictApplicationDto.


        :param client_uri: The client_uri of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type client_uri: str
        """

        self._client_uri = client_uri

    @property
    def logo_uri(self):
        """Gets the logo_uri of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The logo_uri of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri):
        """Sets the logo_uri of this CreateOpenIddictApplicationDto.


        :param logo_uri: The logo_uri of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type logo_uri: str
        """

        self._logo_uri = logo_uri

    @property
    def grant_types(self):
        """Gets the grant_types of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The grant_types of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """Sets the grant_types of this CreateOpenIddictApplicationDto.


        :param grant_types: The grant_types of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type grant_types: list[str]
        """

        self._grant_types = grant_types

    @property
    def scopes(self):
        """Gets the scopes of this CreateOpenIddictApplicationDto.  # noqa: E501


        :return: The scopes of this CreateOpenIddictApplicationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this CreateOpenIddictApplicationDto.


        :param scopes: The scopes of this CreateOpenIddictApplicationDto.  # noqa: E501
        :type scopes: list[str]
        """

        self._scopes = scopes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOpenIddictApplicationDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateOpenIddictApplicationDto):
            return True

        return self.to_dict() != other.to_dict()
