# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class CreateOrUpdateAppReleaseDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'str',
        'version_name': 'str',
        'version_code': 'int',
        'notes': 'str',
        'platform': 'str',
        'key': 'str',
        'rapid_code': 'str',
        'size': 'int',
        'md5': 'str',
        'slice_md5': 'str',
        'product_type': 'str',
        'is_force_update': 'bool',
        'app_id': 'str',
        'is_enabled': 'bool',
        'channel': 'str',
        'environment': 'str'
    }

    attribute_map = {
        'version': 'version',
        'version_name': 'versionName',
        'version_code': 'versionCode',
        'notes': 'notes',
        'platform': 'platform',
        'key': 'key',
        'rapid_code': 'rapidCode',
        'size': 'size',
        'md5': 'md5',
        'slice_md5': 'sliceMd5',
        'product_type': 'productType',
        'is_force_update': 'isForceUpdate',
        'app_id': 'appId',
        'is_enabled': 'isEnabled',
        'channel': 'channel',
        'environment': 'environment'
    }

    def __init__(self, version=None, version_name=None, version_code=None, notes=None, platform=None, key=None, rapid_code=None, size=None, md5=None, slice_md5=None, product_type=None, is_force_update=None, app_id=None, is_enabled=None, channel=None, environment=None, local_vars_configuration=None):  # noqa: E501
        """CreateOrUpdateAppReleaseDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._version_name = None
        self._version_code = None
        self._notes = None
        self._platform = None
        self._key = None
        self._rapid_code = None
        self._size = None
        self._md5 = None
        self._slice_md5 = None
        self._product_type = None
        self._is_force_update = None
        self._app_id = None
        self._is_enabled = None
        self._channel = None
        self._environment = None
        self.discriminator = None

        self.version = version
        self.version_name = version_name
        if version_code is not None:
            self.version_code = version_code
        self.notes = notes
        self.platform = platform
        self.key = key
        self.rapid_code = rapid_code
        self.size = size
        self.md5 = md5
        self.slice_md5 = slice_md5
        self.product_type = product_type
        if is_force_update is not None:
            self.is_force_update = is_force_update
        if app_id is not None:
            self.app_id = app_id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        self.channel = channel
        self.environment = environment

    @property
    def version(self):
        """Gets the version of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The version of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CreateOrUpdateAppReleaseDto.


        :param version: The version of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def version_name(self):
        """Gets the version_name of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The version_name of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._version_name

    @version_name.setter
    def version_name(self, version_name):
        """Sets the version_name of this CreateOrUpdateAppReleaseDto.


        :param version_name: The version_name of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type version_name: str
        """

        self._version_name = version_name

    @property
    def version_code(self):
        """Gets the version_code of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The version_code of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: int
        """
        return self._version_code

    @version_code.setter
    def version_code(self, version_code):
        """Sets the version_code of this CreateOrUpdateAppReleaseDto.


        :param version_code: The version_code of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type version_code: int
        """

        self._version_code = version_code

    @property
    def notes(self):
        """Gets the notes of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The notes of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateOrUpdateAppReleaseDto.


        :param notes: The notes of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type notes: str
        """

        self._notes = notes

    @property
    def platform(self):
        """Gets the platform of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The platform of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CreateOrUpdateAppReleaseDto.


        :param platform: The platform of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type platform: str
        """

        self._platform = platform

    @property
    def key(self):
        """Gets the key of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The key of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CreateOrUpdateAppReleaseDto.


        :param key: The key of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type key: str
        """

        self._key = key

    @property
    def rapid_code(self):
        """Gets the rapid_code of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The rapid_code of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._rapid_code

    @rapid_code.setter
    def rapid_code(self, rapid_code):
        """Sets the rapid_code of this CreateOrUpdateAppReleaseDto.


        :param rapid_code: The rapid_code of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type rapid_code: str
        """

        self._rapid_code = rapid_code

    @property
    def size(self):
        """Gets the size of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The size of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CreateOrUpdateAppReleaseDto.


        :param size: The size of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type size: int
        """

        self._size = size

    @property
    def md5(self):
        """Gets the md5 of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The md5 of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this CreateOrUpdateAppReleaseDto.


        :param md5: The md5 of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type md5: str
        """

        self._md5 = md5

    @property
    def slice_md5(self):
        """Gets the slice_md5 of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The slice_md5 of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._slice_md5

    @slice_md5.setter
    def slice_md5(self, slice_md5):
        """Sets the slice_md5 of this CreateOrUpdateAppReleaseDto.


        :param slice_md5: The slice_md5 of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type slice_md5: str
        """

        self._slice_md5 = slice_md5

    @property
    def product_type(self):
        """Gets the product_type of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The product_type of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this CreateOrUpdateAppReleaseDto.


        :param product_type: The product_type of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type product_type: str
        """

        self._product_type = product_type

    @property
    def is_force_update(self):
        """Gets the is_force_update of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The is_force_update of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_force_update

    @is_force_update.setter
    def is_force_update(self, is_force_update):
        """Sets the is_force_update of this CreateOrUpdateAppReleaseDto.


        :param is_force_update: The is_force_update of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type is_force_update: bool
        """

        self._is_force_update = is_force_update

    @property
    def app_id(self):
        """Gets the app_id of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The app_id of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this CreateOrUpdateAppReleaseDto.


        :param app_id: The app_id of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The is_enabled of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this CreateOrUpdateAppReleaseDto.


        :param is_enabled: The is_enabled of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def channel(self):
        """Gets the channel of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The channel of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this CreateOrUpdateAppReleaseDto.


        :param channel: The channel of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type channel: str
        """

        self._channel = channel

    @property
    def environment(self):
        """Gets the environment of this CreateOrUpdateAppReleaseDto.  # noqa: E501


        :return: The environment of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this CreateOrUpdateAppReleaseDto.


        :param environment: The environment of this CreateOrUpdateAppReleaseDto.  # noqa: E501
        :type environment: str
        """

        self._environment = environment

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOrUpdateAppReleaseDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateOrUpdateAppReleaseDto):
            return True

        return self.to_dict() != other.to_dict()
