# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from puupee-api.configuration import Configuration


class CreateUpdateMessageSourceRouteDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'description': 'str',
        'path': 'str',
        'source_id': 'str',
        'extra': 'str',
        'anticrawler': 'bool',
        'radar': 'bool',
        'rssbud': 'bool',
        'is_published': 'bool',
        'icon_url': 'str'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'path': 'path',
        'source_id': 'sourceId',
        'extra': 'extra',
        'anticrawler': 'anticrawler',
        'radar': 'radar',
        'rssbud': 'rssbud',
        'is_published': 'isPublished',
        'icon_url': 'iconUrl'
    }

    def __init__(self, title=None, description=None, path=None, source_id=None, extra=None, anticrawler=None, radar=None, rssbud=None, is_published=None, icon_url=None, local_vars_configuration=None):  # noqa: E501
        """CreateUpdateMessageSourceRouteDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._description = None
        self._path = None
        self._source_id = None
        self._extra = None
        self._anticrawler = None
        self._radar = None
        self._rssbud = None
        self._is_published = None
        self._icon_url = None
        self.discriminator = None

        self.title = title
        self.description = description
        self.path = path
        if source_id is not None:
            self.source_id = source_id
        self.extra = extra
        if anticrawler is not None:
            self.anticrawler = anticrawler
        if radar is not None:
            self.radar = radar
        if rssbud is not None:
            self.rssbud = rssbud
        if is_published is not None:
            self.is_published = is_published
        self.icon_url = icon_url

    @property
    def title(self):
        """Gets the title of this CreateUpdateMessageSourceRouteDto.  # noqa: E501


        :return: The title of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateUpdateMessageSourceRouteDto.


        :param title: The title of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this CreateUpdateMessageSourceRouteDto.  # noqa: E501


        :return: The description of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateUpdateMessageSourceRouteDto.


        :param description: The description of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def path(self):
        """Gets the path of this CreateUpdateMessageSourceRouteDto.  # noqa: E501


        :return: The path of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CreateUpdateMessageSourceRouteDto.


        :param path: The path of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def source_id(self):
        """Gets the source_id of this CreateUpdateMessageSourceRouteDto.  # noqa: E501


        :return: The source_id of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CreateUpdateMessageSourceRouteDto.


        :param source_id: The source_id of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def extra(self):
        """Gets the extra of this CreateUpdateMessageSourceRouteDto.  # noqa: E501


        :return: The extra of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this CreateUpdateMessageSourceRouteDto.


        :param extra: The extra of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :type extra: str
        """

        self._extra = extra

    @property
    def anticrawler(self):
        """Gets the anticrawler of this CreateUpdateMessageSourceRouteDto.  # noqa: E501


        :return: The anticrawler of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :rtype: bool
        """
        return self._anticrawler

    @anticrawler.setter
    def anticrawler(self, anticrawler):
        """Sets the anticrawler of this CreateUpdateMessageSourceRouteDto.


        :param anticrawler: The anticrawler of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :type anticrawler: bool
        """

        self._anticrawler = anticrawler

    @property
    def radar(self):
        """Gets the radar of this CreateUpdateMessageSourceRouteDto.  # noqa: E501


        :return: The radar of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :rtype: bool
        """
        return self._radar

    @radar.setter
    def radar(self, radar):
        """Sets the radar of this CreateUpdateMessageSourceRouteDto.


        :param radar: The radar of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :type radar: bool
        """

        self._radar = radar

    @property
    def rssbud(self):
        """Gets the rssbud of this CreateUpdateMessageSourceRouteDto.  # noqa: E501


        :return: The rssbud of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :rtype: bool
        """
        return self._rssbud

    @rssbud.setter
    def rssbud(self, rssbud):
        """Sets the rssbud of this CreateUpdateMessageSourceRouteDto.


        :param rssbud: The rssbud of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :type rssbud: bool
        """

        self._rssbud = rssbud

    @property
    def is_published(self):
        """Gets the is_published of this CreateUpdateMessageSourceRouteDto.  # noqa: E501


        :return: The is_published of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this CreateUpdateMessageSourceRouteDto.


        :param is_published: The is_published of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :type is_published: bool
        """

        self._is_published = is_published

    @property
    def icon_url(self):
        """Gets the icon_url of this CreateUpdateMessageSourceRouteDto.  # noqa: E501


        :return: The icon_url of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this CreateUpdateMessageSourceRouteDto.


        :param icon_url: The icon_url of this CreateUpdateMessageSourceRouteDto.  # noqa: E501
        :type icon_url: str
        """

        self._icon_url = icon_url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUpdateMessageSourceRouteDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateUpdateMessageSourceRouteDto):
            return True

        return self.to_dict() != other.to_dict()
