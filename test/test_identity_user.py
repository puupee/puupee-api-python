# coding: utf-8

"""
    Puupee API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import puupee-api
from puupee-api.models.identity_user import IdentityUser  # noqa: E501
from puupee-api.rest import ApiException

class TestIdentityUser(unittest.TestCase):
    """IdentityUser unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IdentityUser
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = puupee-api.models.identity_user.IdentityUser()  # noqa: E501
        if include_optional :
            return IdentityUser(
                id = '', 
                extra_properties = {
                    'key' : null
                    }, 
                concurrency_stamp = '', 
                creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                creator_id = '', 
                last_modification_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                last_modifier_id = '', 
                is_deleted = True, 
                deleter_id = '', 
                deletion_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                tenant_id = '', 
                user_name = '', 
                normalized_user_name = '', 
                name = '', 
                surname = '', 
                email = '', 
                normalized_email = '', 
                email_confirmed = True, 
                password_hash = '', 
                security_stamp = '', 
                is_external = True, 
                phone_number = '', 
                phone_number_confirmed = True, 
                is_active = True, 
                two_factor_enabled = True, 
                lockout_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                lockout_enabled = True, 
                access_failed_count = 56, 
                should_change_password_on_next_login = True, 
                entity_version = 56, 
                last_password_change_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                roles = [
                    puupee-api.models.identity_user_role.IdentityUserRole(
                        tenant_id = '', 
                        user_id = '', 
                        role_id = '', )
                    ], 
                claims = [
                    puupee-api.models.identity_user_claim.IdentityUserClaim(
                        id = '', 
                        tenant_id = '', 
                        claim_type = '', 
                        claim_value = '', 
                        user_id = '', )
                    ], 
                logins = [
                    puupee-api.models.identity_user_login.IdentityUserLogin(
                        tenant_id = '', 
                        user_id = '', 
                        login_provider = '', 
                        provider_key = '', 
                        provider_display_name = '', )
                    ], 
                tokens = [
                    puupee-api.models.identity_user_token.IdentityUserToken(
                        tenant_id = '', 
                        user_id = '', 
                        login_provider = '', 
                        name = '', 
                        value = '', )
                    ], 
                organization_units = [
                    puupee-api.models.identity_user_organization_unit.IdentityUserOrganizationUnit(
                        creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        creator_id = '', 
                        tenant_id = '', 
                        user_id = '', 
                        organization_unit_id = '', )
                    ]
            )
        else :
            return IdentityUser(
        )

    def testIdentityUser(self):
        """Test IdentityUser"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
